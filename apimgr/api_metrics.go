/*
 * API Manager API v1.3
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.3.0
 * Contact: support@axway.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package apimgr

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
	"reflect"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ _context.Context
)

// MetricsApiService MetricsApi service
type MetricsApiService service

/*
MetricsFieldsGet Gets a list of metric field names available for summary and timeline queries.
Retrieves a set of metric fields that may be used when querying or interpreting the summary and timeline reports.  The __metricType__ is the metric name.  The __aggreggateName__ is the metric name for the aggregated __metricType__.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
@return []MetricField
*/
func (a *MetricsApiService) MetricsFieldsGet(ctx _context.Context) ([]MetricField, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []MetricField
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/metrics/fields"
	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v []MetricField
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

// MetricsReportsTypeSummaryLevelGetOpts Optional parameters for the method 'MetricsReportsTypeSummaryLevelGet'
type MetricsReportsTypeSummaryLevelGetOpts struct {
    Client optional.Interface
    Service optional.Interface
    Method optional.String
    Organization optional.String
    Reportsubtype optional.String
}

/*
MetricsReportsTypeSummaryLevelGet Gets a summary report for application usage
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param type_ The report type, either 'app' or 'api'
 * @param level The report level (0 or 1 for drill-through)
 * @param from The starting date/time for the report.
 * @param to The end date/time for the report.
 * @param optional nil or *MetricsReportsTypeSummaryLevelGetOpts - Optional Parameters:
 * @param "Client" (optional.Interface of []string) -  Filter a specific client ID (multiple permitted).
 * @param "Service" (optional.Interface of []string) -  Filter a specific service name (multiple permitted).
 * @param "Method" (optional.String) -  Filter a specific method.
 * @param "Organization" (optional.String) -  Filter a specific organziation.
 * @param "Reportsubtype" (optional.String) -  Define the report subtype. Allowed values are : 'original', 'trafficAll' or 'trafficSubset'. Defaults to 'original' if absent
*/
func (a *MetricsApiService) MetricsReportsTypeSummaryLevelGet(ctx _context.Context, type_ string, level int32, from string, to string, localVarOptionals *MetricsReportsTypeSummaryLevelGetOpts) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/metrics/reports/{type}/summary/{level}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", _neturl.QueryEscape(parameterToString(type_, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"level"+"}", _neturl.QueryEscape(parameterToString(level, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("from", parameterToString(from, ""))
	localVarQueryParams.Add("to", parameterToString(to, ""))
	if localVarOptionals != nil && localVarOptionals.Client.IsSet() {
		t:=localVarOptionals.Client.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("client", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("client", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Service.IsSet() {
		t:=localVarOptionals.Service.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("service", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("service", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Method.IsSet() {
		localVarQueryParams.Add("method", parameterToString(localVarOptionals.Method.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Organization.IsSet() {
		localVarQueryParams.Add("organization", parameterToString(localVarOptionals.Organization.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Reportsubtype.IsSet() {
		localVarQueryParams.Add("reportsubtype", parameterToString(localVarOptionals.Reportsubtype.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

// MetricsReportsTypeTimelineLevelMetricTypeGetOpts Optional parameters for the method 'MetricsReportsTypeTimelineLevelMetricTypeGet'
type MetricsReportsTypeTimelineLevelMetricTypeGetOpts struct {
    Client optional.Interface
    Service optional.Interface
    Method optional.String
    Organization optional.String
    Reportsubtype optional.String
}

/*
MetricsReportsTypeTimelineLevelMetricTypeGet Gets a timeline report for application usage
Produces a timeline report for a __metricType__ over a specified time range.  The __from__ and __two__ parameters should be a URL encoded ISO-8601 combined date and time format (e.g. 2013-03-13T00%3A00%3A00Z).  The __metricType__ name is one of the types returned from [fields](#APIMetricsgetMetricFields).
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param type_ The report type, either 'app' or 'api'
 * @param level The report level (0 or 1 for drill-through)
 * @param from The starting date/time for the report.
 * @param to The end date/time for the report.
 * @param metricType The metric type to query.
 * @param optional nil or *MetricsReportsTypeTimelineLevelMetricTypeGetOpts - Optional Parameters:
 * @param "Client" (optional.Interface of []string) -  Filter a specific client ID (multiple permitted).
 * @param "Service" (optional.Interface of []string) -  Filter a specific service name (multiple permitted).
 * @param "Method" (optional.String) -  Filter a specific method.
 * @param "Organization" (optional.String) -  Filter a specific organziation.
 * @param "Reportsubtype" (optional.String) -  Define the report subtype. Allowed values are : 'original', 'trafficAll' or 'trafficSubset'. Defaults to 'original' if absent
@return MetricTimeline
*/
func (a *MetricsApiService) MetricsReportsTypeTimelineLevelMetricTypeGet(ctx _context.Context, type_ string, level int32, from string, to string, metricType string, localVarOptionals *MetricsReportsTypeTimelineLevelMetricTypeGetOpts) (MetricTimeline, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  MetricTimeline
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/metrics/reports/{type}/timeline/{level}/{metricType}"
	localVarPath = strings.Replace(localVarPath, "{"+"type"+"}", _neturl.QueryEscape(parameterToString(type_, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"level"+"}", _neturl.QueryEscape(parameterToString(level, "")) , -1)

	localVarPath = strings.Replace(localVarPath, "{"+"metricType"+"}", _neturl.QueryEscape(parameterToString(metricType, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	localVarQueryParams.Add("from", parameterToString(from, ""))
	localVarQueryParams.Add("to", parameterToString(to, ""))
	if localVarOptionals != nil && localVarOptionals.Client.IsSet() {
		t:=localVarOptionals.Client.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("client", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("client", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Service.IsSet() {
		t:=localVarOptionals.Service.Value()
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				localVarQueryParams.Add("service", parameterToString(s.Index(i), "multi"))
			}
		} else {
			localVarQueryParams.Add("service", parameterToString(t, "multi"))
		}
	}
	if localVarOptionals != nil && localVarOptionals.Method.IsSet() {
		localVarQueryParams.Add("method", parameterToString(localVarOptionals.Method.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Organization.IsSet() {
		localVarQueryParams.Add("organization", parameterToString(localVarOptionals.Organization.Value(), ""))
	}
	if localVarOptionals != nil && localVarOptionals.Reportsubtype.IsSet() {
		localVarQueryParams.Add("reportsubtype", parameterToString(localVarOptionals.Reportsubtype.Value(), ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(r)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 200 {
			var v MetricTimeline
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
