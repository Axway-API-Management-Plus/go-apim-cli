openapi: 3.0.1
info:
  contact:
    email: support@axway.com
  license:
    name: Copyright Axway 2018. All rights reserved.
  title: API Manager API v1.3
  version: 1.3.0
servers:
- url: /api/portal/v1.3
tags:
- name: Applications
- name: OAuth Authorizations
- name: Metrics
- name: Migrate
- name: Organizations
- name: API Manager Services
- name: API Proxy Registration
- name: Quotas
- name: API Repository
- name: Users
- name: Current User
- name: API Discovery
- name: Login
paths:
  /alerts:
    get:
      description: Gets the alerts configured for the API Manager that shows which
        alerts are enabled/disabled for the application.  Only the API Administrator
        may call this method.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertConfig'
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Gets the alerts configured for the API Manager
      tags:
      - API Manager Services
    post:
      description: Updates the API Manager alerts configuration.  Only the API Administrator
        may call this method.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AlertConfig'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AlertConfig'
          description: Created
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Updates the API Manager alerts configuration
      tags:
      - API Manager Services
      x-codegen-request-body-name: body
  /apirepo:
    get:
      description: |+
        Get the list of API from the API repository.  The list of API can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        id
        :    Matches the API by ID

        name
        :    Matches the API by name

        The __op__ is an operation and is one of:

        eq
        :    Equal

        ne
        :    Not equal

        gt
        :     Greater than

        lt
        :     Less than

        ge
        :     Greater than or equal

        le
        :     Less than or equal

        like
        :    Like

        gete
        :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__.

      parameters:
      - in: query
        name: filename
        schema:
          type: string
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIDefinition'
                type: array
            application/octet-stream:
              schema:
                items:
                  $ref: '#/components/schemas/APIDefinition'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the list of API
      tags:
      - API Repository
    post:
      description: When creating an API, the __name__ and __basePath__ are required.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIDefinition'
        description: The API resource to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create an API definition
      tags:
      - API Repository
      x-codegen-request-body-name: api
  /apirepo/import:
    post:
      description: Imports an API definition from a valid standard Swagger or WADL
        definition.  On import, the original API definition is retained, but the API
        is converted to an internal format for processing.
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                organizationId:
                  description: The API development organization ID that owns the import.
                  type: string
                name:
                  description: The API name.
                  type: string
                type:
                  description: 'The type of import, one of: swagger, wadl, raml'
                  type: string
                file:
                  description: The API definition file to import
                  format: binary
                  type: string
              required:
              - file
              - name
              - organizationId
              - type
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create an API by uploading a file
      tags:
      - API Repository
  /apirepo/importFromExternal:
    post:
      description: Create one or more backend APIs for an external service. External
        APIs are imported via a connector. If the connector configuration specifies
        that all external APIs should be merged into a single new backend API, the
        name and description parameters are applied to this new API. Alternatively,
        if the connector specifies that a separate backend API should be created for
        each external API, the name and description parameters are ignored, and the
        names and descriptions of the new backend APIs are taken from the external
        service definitions.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                organizationId:
                  description: The API development organization that owns the new
                    APIs
                  type: string
                connectorId:
                  description: The API connector through which new APIs should be
                    created
                  type: string
                name:
                  description: The name of the merged API (see description)
                  type: string
                description:
                  description: A description of the merged API (see description)
                  type: string
                api:
                  description: List of external APIs to be imported
                  type: string
              required:
              - api
              - connectorId
              - description
              - name
              - organizationId
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIDefinition'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create one or more backend APIs for an external service
      tags:
      - API Repository
  /apirepo/importFromGw:
    post:
      description: Imports an API definition from a Policy Studio REST or WSDL service
        hosted on the API Gateway. On import, a Swagger representation of the original
        API definition is retained, but the API is converted to an internal format
        for processing.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                id:
                  description: The id of the PolicyStudio-registered service to import.
                  type: string
                name:
                  description: The service name.
                  type: string
                organizationId:
                  description: The API development organization ID that owns the import.
                  type: string
                instance:
                  type: string
                host:
                  type: string
                port:
                  type: string
                username:
                  type: string
                password:
                  type: string
              required:
              - id
              - name
              - organizationId
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create an API definition by importing a PolicyStudio-registered web
        service (REST or WSDL) hosted on the the API Gateway
      tags:
      - API Repository
  /apirepo/importFromUrl:
    post:
      description: Imports an API definition from a valid standard Swagger or WADL
        definition from the specified __url__.  It is possible to supply an optional
        __username__ and __password__ if the __url__ requires HTTP Basic authentication.  On
        import, the original API definition is retained, but the API is converted
        to an internal format for processing. The API name currently defaults to the
        filename but this will be deprecated in a future release. The name parameter
        should be used to name the API and will be required in a future release.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                organizationId:
                  description: The API development organization ID that owns the import.
                  type: string
                name:
                  description: The name of the API.
                  type: string
                fileName:
                  description: The file name of the import.
                  type: string
                type:
                  description: 'The type of import, one of: swagger, wadl, raml.'
                  type: string
                url:
                  description: The URL to import.
                  type: string
                username:
                  description: HTTP Basic username to use for connection.
                  type: string
                password:
                  description: HTTP Basic password to use for connection.
                  type: string
              required:
              - organizationId
              - type
              - url
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create an API by loading a file from URL.
      tags:
      - API Repository
  /apirepo/{id}:
    delete:
      description: Deletes a backend API.
      parameters:
      - description: The API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes an API.
      tags:
      - API Repository
    get:
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get an API by ID
      tags:
      - API Repository
    put:
      parameters:
      - description: The API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIDefinition'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIDefinition'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an API
      tags:
      - API Repository
      x-codegen-request-body-name: body
  /apirepo/{id}/download:
    get:
      description: Downloads an API by ID.  If __filename__ is not supplied, the API
        name will be used.  If the API was imported using [/import](#importApisFromFile)
        or [/import](#createApiFromUrl), then it is possible to download the original
        API definition by setting __original__ to __true__.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - description: Override the default filename for download
        in: query
        name: filename
        required: true
        schema:
          type: string
      - description: If true, and the API was imported, this will download the original
          definition
        in: query
        name: original
        required: true
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content: {}
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Downloads an API by ID.
      tags:
      - API Repository
  /apirepo/{id}/methods:
    get:
      description: |+
        Get the list of API methods from the API repository.  The list of methods can be filtered using the expression: field=__field__&op=__op__&value=__value__.  Optionally, you can add a logical operation for all expressions, using the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple expression filters can be used, specifying field, op, and value for each filter. The __field__ is one of:

        id
        :    Matches the API by ID

        name
        :    Matches the API by name

        The __op__ is an operation and is one of:

        eq
        :    Equal

        ne
        :    Not equal

        gt
        :     Greater than

        lt
        :     Less than

        ge
        :     Greater than or equal

        le
        :     Less than or equal

        like
        :    Like

        gete
        :     Greater than or equal to, and less than or equal to; the __value__ should be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10

        The __value__ will be compared against the __field__, according to the supplied __op__.

      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Method'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Queries the list of API methods
      tags:
      - API Repository
    post:
      parameters:
      - description: The API identifierentifier to create a method.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Method'
        description: The method to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create an API method
      tags:
      - API Repository
      x-codegen-request-body-name: method
  /apirepo/{id}/methods/{methodId}:
    delete:
      description: Deletes a backend API method.
      parameters:
      - description: The API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The method identifier.
        in: path
        name: methodId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete an API method
      tags:
      - API Repository
    get:
      description: Retrieves a method for a given API.
      parameters:
      - description: The API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The API method ID.
        in: path
        name: methodId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get API method by ID.
      tags:
      - API Repository
    put:
      parameters:
      - description: The API identifierentifier to create a method.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The method identifier.
        in: path
        name: methodId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Method'
        description: The method to update.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Method'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Update an API method
      tags:
      - API Repository
      x-codegen-request-body-name: method
  /appinfo:
    get:
      description: Returns an API Manager configuration object describing the application.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: OK
      summary: Gets API Manager feature information.
      tags:
      - API Manager Services
  /applications:
    get:
      description: "Get the list of applications that are visible to the authenticated\
        \ user.  The list of applications can be filtered using the expression: field=__field__&op=__op__&value=__value__.\
        \  Optionally, you can add a logical operation for all expressions, using\
        \ the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple\
        \ expression filters can be used, specifying field, op, and value for each\
        \ filter. The __field__ is one of:\n\napiid\n:\tMatches the application if\
        \ the application is using the API, specified by ID\n\nuserid\n:\tMatches\
        \ the application if the user has explicit access to the application, specified\
        \ by ID\n\ndescription\n:\tThe application's description\n\nemail\n:\tThe\
        \ application's contact email address\n\nenabled\n: \tThe enabled state of\
        \ the application, one of: enabled, disabled\n\ncreatedOn\n:\tThe date the\
        \ application was created on, time in ms, e.g.: 1372755998542\n\nname\n:\t\
        The name of the application\n\norgid\n:\tMatches the application if the application\
        \ is part of the organization, specified by ID\n\nphone\n:\tThe application's\
        \ contact phone\n\nstate\n:\tThe application's current state, one of: approved,\
        \ pending\n\nThe __op__ is an operation and is one of:\n\neq\n:\tEqual\n\n\
        ne\n:\tNot equal\n\ngt\n: \tGreater than\n\nlt\n: \tLess than\n\nge\n: \t\
        Greater than or equal\n\nle\n: \tLess than or equal\n\nlike\n:\tLike\n\ngete\n\
        : \tGreater than or equal to, and less than or equal to; the __value__ should\
        \ be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10\n\
        \nThe __value__ will be compared against the __field__, according to the supplied\
        \ __op__. "
      parameters:
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Application'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the list of applications
      tags:
      - Applications
    post:
      description: Creates a new application.  New applications may need to be approved
        using [/approve](#APIApplicationsapproveApp).
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApplicationRequest'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new application.
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/oauthclient/{clientId}:
    get:
      description: Retrieves the application associated with an OAuth Client ID
      parameters:
      - description: The OAuth Client ID associated with the Application.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: OK
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get an application associated with an OAuth Client ID
      tags:
      - Applications
  /applications/{id}:
    delete:
      description: Only managers of the application, API Manager Administrators, or
        Organization Administrators with enabled delegated application management
        privileges, may delete applications.
      parameters:
      - description: The ID of application to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete an application
      tags:
      - Applications
    get:
      description: Retrieves the details of an application.
      parameters:
      - description: The ID of the application to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: OK
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get an application
      tags:
      - Applications
    put:
      description: Only managers of the application, API Manager Administrators, or
        Organization Administrators with enabled delegated application management
        privileges, may update an application. Note, if a field is omitted from the
        payload, or its value is set to null, the existing value for this field will
        be retained.
      parameters:
      - description: The ID of the application to be updated
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Application'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Update an application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/apikeys:
    get:
      description: Returns the API Keys associated with an application.
      parameters:
      - description: The ID of application whose API Keys are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIKey'
                type: array
          description: OK
        "204":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIKey'
                type: array
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the API Keys associated with an application
      tags:
      - Applications
    post:
      description: Creates a new API Key and secret for the application.
      parameters:
      - description: The ID of application requiring an API Key.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
        description: The APIKey to create
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
          description: Created
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "409":
          content: {}
          description: Conflict
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new API Key and secret for the application
      tags:
      - Applications
      x-codegen-request-body-name: apiKey
  /applications/{id}/apikeys/{apikeyid}:
    put:
      description: Updates the secret, enabled and Cors origin field.  The fields
        __id__, __createdBy__, __createdOn__ are read only.
      parameters:
      - description: The ID of application whose API Key is to be updated.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the API Key to be updated.
        in: path
        name: apikeyid
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/APIKey'
        required: false
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIKey'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an API Key
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/apikeys/{keyId}:
    delete:
      description: Deletes an API Key. Deleting an API key means that it will no longer
        be accepted for application authentication.
      parameters:
      - description: The API Key ID to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: keyId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete an API Key
      tags:
      - Applications
  /applications/{id}/apis:
    get:
      description: Get the list of APIs that the application can access.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/APIAccess'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the list of APIs that the application can access
      tags:
      - Applications
    post:
      description: Only API Manager Administrator, or an Organization Administrator
        of the application's organization with the correct privileges, or the application
        manager may create API access requests.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/APIAccess'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: Created
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create a request for an application to access an API.
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/apis/{apiAccessId}:
    delete:
      description: Permanently deletes access to an API for an application.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The API access ID.
        in: path
        name: apiAccessId
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes access to an API for an application
      tags:
      - Applications
    put:
      description: Updates access to an API for an application.  Only __enabled__
        may be modified.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The API access ID.
        in: path
        name: apiAccessId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/APIAccess'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates access to an API for an application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/apis/{apiAccessId}/approve:
    post:
      description: Approving user must be API Manager Administrator or an Organization
        Administrator of the application's organization with the correct privileges
        to approve API access requests.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The API access ID.
        in: path
        name: apiAccessId
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates an API access request to an API for an application.
      tags:
      - Applications
  /applications/{id}/approve:
    post:
      description: Approving user must be API Manager Administrator or an Organization
        Administrator of the application's organization with the correct privileges
        to approve new application requests.
      parameters:
      - description: The application request ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Approves a pending application request
      tags:
      - Applications
  /applications/{id}/availablescopes:
    get:
      description: Returns the OAuth scopes available to  an application.
      parameters:
      - description: The ID of application whose OAuth scopes are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: apiScope
        schema:
          default: false
          type: boolean
      responses:
        "204":
          content:
            application/json:
              schema:
                items:
                  items:
                    properties: {}
                    type: object
                  type: array
                  uniqueItems: true
                type: array
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the scopes available to an application
      tags:
      - Applications
  /applications/{id}/extclients:
    get:
      description: Returns the external clients associated with an application. External
        clients are used when authenticating the application through a 3rd party OAuth
        service
      parameters:
      - description: The ID of application whose external clients are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ExternalClient'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the external clients associated with an application
      tags:
      - Applications
    post:
      description: Maps a new external client to the application. External clients
        are used when authenticating the application through a 3rd party OAuth service
      parameters:
      - description: The ID of application to map to an external client.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalClient'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalClient'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Maps a new external client to the application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/extclients/{objectId}:
    delete:
      description: Deletes an external client. Deleting a mapping means that it will
        no longer be accepted for application authentication.
      parameters:
      - description: The ID of application whose external client is to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the external client entry to be deleted.
        in: path
        name: objectId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete an external client
      tags:
      - Applications
    put:
      description: Updates an external client for the application. External clients
        are used when authenticating the application through a 3rd party OAuth service
      parameters:
      - description: The ID of application whose external client is to be updated.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The external client entry to be updated.
        in: path
        name: objectId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExternalClient'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExternalClient'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an external client for the application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/image:
    get:
      description: Get the JPEG image associated with an application.
      parameters:
      - description: The ID of the application whose image is to be return
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the image for an application
      tags:
      - Applications
    post:
      description: Adds a JPEG image to an application with a MultiPart POST
      parameters:
      - description: The ID of the application whose image is being added
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: The file uploaded in the POST body as an element in
                    a multipart post
                  format: binary
                  type: string
              required:
              - file
        required: true
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "409":
          content: {}
          description: Conflict
        "413":
          content: {}
          description: Request Entity Too Large
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Adds a JPEG image to an application
      tags:
      - Applications
  /applications/{id}/oauth:
    get:
      description: Returns the OAuth Credentials associated with an application.
      parameters:
      - description: The ID of application whose OAuth Credentials are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuthClient'
                type: array
          description: OK
        "204":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuthClient'
                type: array
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the OAuth Credentials associated with an application
      tags:
      - Applications
    post:
      description: Creates a new OAuth client ID and secret for the application.
      parameters:
      - description: The ID of application requiring an OAuth client ID and secret.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthClient'
        description: The OAuth credential to create
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClient'
          description: Created
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClient'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new OAuth client ID and secret for the application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/oauth/{clientId}:
    put:
      description: Updates an OAuth Credential for the application.
      parameters:
      - description: The ID of application whose OAuth credential is to be updated.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The OAuth Credential ID to be updated.
        in: path
        name: clientId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthClient'
        required: false
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClient'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an OAuth Credential for the application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/oauth/{clientid}/newsecret:
    put:
      description: Updates an OAuth Credential for an application by generating a
        new client secret.
      parameters:
      - description: The ID of application whose OAuth credential is to be updated
          with a new secret
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The OAuth Credential ID to be updated with a new secret
        in: path
        name: clientid
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthClient'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an OAuth Credential for an application by generating a new
        secret
      tags:
      - Applications
  /applications/{id}/oauth/{oauthId}:
    delete:
      description: Deletes an OAuth client ID and secret. Deleting an OAuth client
        ID and secret means that it will no longer be accepted for OAuth application
        authentication.
      parameters:
      - description: The ID of application whose OAuth Credential is to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The OAuth Client ID to be deleted.
        in: path
        name: oauthId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete an OAuth client ID and secret
      tags:
      - Applications
  /applications/{id}/oauthresource:
    get:
      description: Returns the OAuth protected resources (scopes) associated with
        an application.
      parameters:
      - description: The ID of application whose OAuth protected resources (Scopes)
          are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuthResource'
                type: array
          description: OK
        "204":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuthResource'
                type: array
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the OAuth protected resources (scopes) associated with an application
      tags:
      - Applications
    post:
      description: An application must define which OAuth Protected resources it wants
        to access. These resources will define the scope of the application.
      parameters:
      - description: The ID of application requiring an OAuth protected resource.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthResource'
        description: The OAuth protected resource to add to the application
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResource'
          description: Created
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResource'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Adds an OAuth protected resource to an application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/oauthresource/{resourceId}:
    delete:
      description: Removes the association between an application and an OAuth protected
        resource on the API Server. The application will no longer have the scope
        associated with the resource. Tokens issued prior to the removal will still
        be scoped for the resource.
      parameters:
      - description: The ID of application whose protected resource is to be removed.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The uri of the OAuth protected resource to be disassociated from
          the application.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Remove an OAuth protected resource from an application
      tags:
      - Applications
    put:
      description: An OAuth Protected resource associated with an application can
        be enabled or disabled with this method.
      parameters:
      - description: The ID of application requiring an updated OAuth protected resource.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the OAuth protected resource to update
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthResource'
        description: The updated OAuth protected resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResource'
          description: OK
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthResource'
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates a protected resource associate with an application, sets enabled
        to true/false
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/permissions:
    get:
      description: Get the access-control list (ACL) for the application. Callers
        with view-only privilege can only access their own permission.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PermissionDTO'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the list of permissions.
      tags:
      - Applications
    post:
      description: Add a new access-control entry to the application's ACL. Management
        privilege required.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDTO'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDTO'
          description: Created
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create a new permission.
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/permissions/{permId}:
    delete:
      description: Remove an existing access-control entry from the application's
        ACL. Management privilege required.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The permission ID.
        in: path
        name: permId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Remove a permission
      tags:
      - Applications
    put:
      description: Modify an existing access-control entry from the application's
        ACL. Management privilege required.
      parameters:
      - description: The application ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The permission ID.
        in: path
        name: permId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PermissionDTO'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PermissionDTO'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Modify a permission
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/quota:
    delete:
      description: Deletes a quota from an application
      parameters:
      - description: The ID of application who's quota constraint is to be deleted.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes a quota from an application
      tags:
      - Applications
    get:
      description: Returns the quota associated with an application.
      parameters:
      - description: The ID of application who's quota constraints are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/QuotaDTO'
                type: array
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the quota associated with an application.
      tags:
      - Applications
    post:
      description: Creates a new quota constraint for the application.
      parameters:
      - description: The ID of application for the quota contraint.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaDTO'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new quota constraint for the application
      tags:
      - Applications
      x-codegen-request-body-name: body
    put:
      description: Updates a quota contraint for the given application.
      parameters:
      - description: The ID of application who's quota is to be updated.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaDTO'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates a quota contraint for an application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/scope:
    get:
      description: Returns the OAuth scopes associated with an application.
      parameters:
      - description: The ID of application whose OAuth protected resources (Scopes)
          are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  items:
                    properties: {}
                    type: object
                  type: array
                  uniqueItems: true
                type: array
          description: OK
        "204":
          content:
            application/json:
              schema:
                items:
                  items:
                    properties: {}
                    type: object
                  type: array
                  uniqueItems: true
                type: array
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the scopes associated with an application
      tags:
      - Applications
    post:
      description: An application must define which scopes it wants to access. These
        define the scope of the application.
      parameters:
      - description: The ID of application requiring an OAuth scope.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthAppScope'
        description: The OAuth Scope to add to the application
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAppScope'
          description: Created
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAppScope'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Adds an OAuth protected resource to an application
      tags:
      - Applications
      x-codegen-request-body-name: body
  /applications/{id}/scope/{scopeId}:
    delete:
      description: Removes the association between an application and an OAuth protected
        resource on the API Server. The application will no longer have the scope
        associated with the resource. Tokens issued prior to the removal will still
        be scoped for the resource.
      parameters:
      - description: The ID of application whose protected resource is to be removed.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The id of the Scope to be disassociated from the application.
        in: path
        name: scopeId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Remove an OAuth protected resource from an application
      tags:
      - Applications
    put:
      description: An OAuth Scope associated with an application can be set or unset
        as a default scope with this method.
      parameters:
      - description: The ID of application requiring an updated OAuth protected resource.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The ID of the Application Scope to update
        in: path
        name: scopeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OAuthAppScope'
        description: The updated OAuth protected resource
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAppScope'
          description: OK
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OAuthAppScope'
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates a scope associated with an application, sets default to true/false
      tags:
      - Applications
      x-codegen-request-body-name: body
  /authorizations:
    get:
      description: If user is a member of the admin group then all authorizations
        are returned. If not, then the logged in user's authorizations are returned.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Authorization'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Retrieve all stored OAuth Authorizations for the logged in user.
      tags:
      - OAuth Authorizations
  /authorizations/owner/{subjectid}/application/{appid}:
    delete:
      parameters:
      - in: path
        name: subjectid
        required: true
        schema:
          type: string
      - in: path
        name: appid
        required: true
        schema:
          type: string
      responses:
        default:
          content: {}
          description: successful operation
      security:
      - basic: []
      tags:
      - OAuth Authorizations
  /authorizations/{authzid}:
    delete:
      description: Admin or Resource Owner task to delete the given authorization
        id.
      parameters:
      - in: path
        name: authzid
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete the OAuth Authorization for the given authorization id.
      tags:
      - OAuth Authorizations
  /certinfo:
    post:
      description: Extracts certificate information from the supplied data.
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                username:
                  type: string
                file:
                  format: binary
                  type: string
                passphrase:
                  type: string
                inbound:
                  type: boolean
                outbound:
                  type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CACert'
          description: OK
        "400":
          content: {}
          description: Bad Request
      security:
      - basic: []
      summary: Extracts certificate information from the supplied data
      tags:
      - API Manager Services
  /config:
    get:
      description: Returns an API Manager configuration object.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Gets API Manager configuration
      tags:
      - API Manager Services
    put:
      description: Updates the API Manager configuration.  Only the API Administrator
        may call this method.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Updates the API Manager configuration
      tags:
      - API Manager Services
      x-codegen-request-body-name: body
  /connectors:
    get:
      description: Return a list of API connectors.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    properties: {}
                    type: object
                  type: object
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Return a list of API connectors
      tags:
      - API Manager Services
  /connectors/{connectorId}:
    get:
      description: Return a list of APIs for the specified connector.
      parameters:
      - description: ID of the connector for which APIs should be returned. Connector
          IDs can be retrieved by calling /connectors.
        in: path
        name: connectorId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  additionalProperties:
                    properties: {}
                    type: object
                  type: object
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Return a list of APIs for the specified connector
      tags:
      - API Manager Services
  /connectors/{connectorId}/login:
    post:
      description: Login to an external service from which APIs will be imported.
      parameters:
      - description: ID of the API connector. Connector IDs can be retrieved by calling
          /connectors.
        in: path
        name: connectorId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  description: External service username
                  type: string
                password:
                  description: External service password
                  type: string
              required:
              - password
              - username
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Login to an external service from which APIs will be imported
      tags:
      - API Manager Services
  /currentuser:
    get:
      description: Get the account details of the authenticated user
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "401":
          content: {}
          description: The caller cannot be authenticated
        "403":
          content: {}
          description: The caller is not allowed to access this resource
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the current user
      tags:
      - Current User
    put:
      description: Modify the account details of the authenticated user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "401":
          content: {}
          description: The caller cannot be authenticated
        "403":
          content: {}
          description: The caller is not allowed to access this resource
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Modify the current user
      tags:
      - Current User
      x-codegen-request-body-name: body
  /currentuser/changepassword:
    post:
      description: Modify the password of the authenticated user
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                oldPassword:
                  description: The user's old password
                  type: string
                newPassword:
                  description: The user's new password
                  type: string
              required:
              - newPassword
              - oldPassword
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: The caller cannot be authenticated
        "403":
          content: {}
          description: The caller is not allowed to access this resource
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Modify the current user's password
      tags:
      - Current User
  /discovery/apis:
    get:
      description: Lists all APIs/services virtualised in the API Server. API Administrators
        see all APIs/services. Users see APIs/services for their organization.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DiscoveryAPI'
                type: array
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Lists all APIs/services virtualised in the API Server.
      tags:
      - API Discovery
  /discovery/oauthresources:
    get:
      description: Gets a list OAuth protected resources and their associated scopes.
      responses:
        "200":
          content: {}
          description: OK
      security:
      - basic: []
      summary: Gets a list OAuth protected resources and their associated scopes.
      tags:
      - API Discovery
  /discovery/scopes:
    get:
      description: Retrieves every resource on the API Server that is protected by
        OAuth, and the scopes that cover those resources. Only API Administrators
        will be able to retrieve information.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/OAuthProtectedResource'
                type: array
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Retrieves every resource on the API Server that is protected by OAuth,
        and the scopes that cover those resources
      tags:
      - API Discovery
  /discovery/sdk/{id}/{platform}:
    get:
      description: Generates a client SDK package for the specified API based on the
        platform. Supported platform are Android, iOS-swift, NodeJS, Titanium
      parameters:
      - description: The name of the API to generate the client SDK package for
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: 'Generated client type, one of: android, iOS-swift, nodejS, titanium'
        in: path
        name: platform
        required: true
        schema:
          type: string
      - description: Java package name generated only for Android platform. It must
          be a valid java package name.
        in: query
        name: packagename
        schema:
          default: com.axway
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Generates an SDK package for the specified API based on the type of
        the client requested
      tags:
      - API Discovery
  /discovery/swagger/api/id/{id}:
    get:
      description: Retrieves an extended Swagger feed for the specified API. API Administrators
        will always see the API. Users will only see the API if it is available for
        their organization.If __filename__ is supplied, the download will use it as
        the `Content-Disposition` filename attachment.
      parameters:
      - description: The unique ID of the API to return
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: Override the default filename for download
        in: query
        name: filename
        schema:
          type: string
      - description: The Swagger version of the feed, either 1.1 (default) or 2.0.
        in: query
        name: swaggerVersion
        schema:
          default: "1.1"
          type: string
      - description: If true, extensions such as the x-axway object are returned in
          the Swagger definitions (default=true)
        in: query
        name: extensions
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Retrieves an extended Swagger feed for the specified API.
      tags:
      - API Discovery
  /discovery/swagger/api/{name}:
    get:
      deprecated: true
      description: Retrieves an extended Swagger feed for the specified API. API Administrators
        will always see the API. Users will only see the API if it is available for
        their organization.If __filename__ is supplied, the download will use it as
        the `Content-Disposition` filename attachment.
      parameters:
      - description: The name of the API to return
        in: path
        name: name
        required: true
        schema:
          type: string
      - description: Override the default filename for download
        in: query
        name: filename
        schema:
          type: string
      - description: The version of the API. Should always be provided if there is
          more than one version
        in: query
        name: apiVersion
        schema:
          type: string
      - description: The Swagger version of the feed, either 1.1 (default) or 2.0.
        in: query
        name: swaggerVersion
        schema:
          default: "1.1"
          type: string
      - description: If true, extensions such as the x-axway object are returned in
          the Swagger definitions (default=true)
        in: query
        name: extensions
        schema:
          default: true
          type: boolean
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Retrieves an extended Swagger feed for the specified API.
      tags:
      - API Discovery
  /discovery/swagger/apis:
    get:
      description: "Convenience method for retrieving all Swagger feeds for all virtualised\
        \ services that are visible to the authenticated user.  The list of APIs can\
        \ be filtered using the expression: field=__field__&op=__op__&value=__value__.\
        \  Optionally, you can add a logical operation for all expressions, using\
        \ the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple\
        \ expression filters can be used, specifying field, op, and value for each\
        \ filter. The __field__ is one of:\n\nid\n:        Matches the API by the\
        \ specified ID\n\nname\n:        Matches the API by the specified name\n\n\
        description\n:        Matches the API by the specified description\n\nsummary\n\
        :        Matches the API by the specified summary\n\nversion\n:        Matches\
        \ the API by the specified version\n\ntype\n:        Matches the API by the\
        \ specified type. Type can be 'rest' or 'wsdl'\n\nresourcepath\n:        Matches\
        \ the API by the specified inbound path\n\ntaggroup\n:        Matches the\
        \ API by the specified tag group\n\ntag\n:        Matches the API by the specified\
        \ tag value\n\nmethodtaggroup\n:        Matches the API by the specified method\
        \ tag group, i.e. if the API contains a method that contains a tag group matching\
        \ that specified\n\nmethodtag\n:        Matches the API by the specified method\
        \ tag value, i.e. if the API contains a method that contains a tag value matching\
        \ that specified\n\nThe __op__ is an operation and is one of:\n\neq\n:   \
        \ Equal\n\nne\n:    Not equal\n\ngt\n:     Greater than\n\nlt\n:     Less\
        \ than\n\nge\n:     Greater than or equal\n\nle\n:     Less than or equal\n\
        \nlike\n:    Like\n\ngete\n:     Greater than or equal to, and less than or\
        \ equal to; the __value__ should be a lower-minimum and upper-maximum separated\
        \ by comma, e.g: value=5,10\n\nThe __value__ will be compared against the\
        \ __field__, according to the supplied __op__. "
      parameters:
      - description: The Swagger API version
        in: query
        name: apiVersion
        schema:
          type: string
      - description: The Swagger version
        in: query
        name: swaggerVersion
        schema:
          default: "1.2"
          type: string
      - description: If true, extensions such as the x-axway object are returned in
          the Swagger definitions (default=true)
        in: query
        name: extensions
        schema:
          default: true
          type: boolean
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content: {}
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Convenience method for retrieving all Swagger feeds for all virtualised
        services.
      tags:
      - API Discovery
  /discovery/swagger/apis/{id}/image:
    get:
      parameters:
      - description: The API identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Retrieves the API image
      tags:
      - API Discovery
  /discovery/swagger/apis/{id}/service-definition:
    get:
      parameters:
      - description: The API identifier
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: 'Retrieves the service definition of the API. '
      tags:
      - API Discovery
  /filedata:
    post:
      description: Returns the DataURI representation of the uploaded file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
      security:
      - basic: []
      summary: Returns the DataURI representation of the uploaded file
      tags:
      - API Manager Services
  /license:
    get:
      description: Returns an API Manager license configuration object.  Does not
        require authentication.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
      summary: Checks that the API Manager has a valid license
      tags:
      - API Manager Services
  /listeners:
    get:
      description: Returns a list of API Manager listeners.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/PortalTrafficListener'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Gets the API Manager listeners
      tags:
      - API Manager Services
  /login:
    delete:
      description: Destroys the caller session with the API Manager.
      responses:
        "204":
          content: {}
          description: No Content
      security:
      - basic: []
      summary: Logout from API Manager
      tags:
      - Login
    post:
      description: Logs a user, identified by _username_ and _password_, into the
        API Manager by creating unique a session cookie.  The _success_ parameter
        defaults to a named URL identified by "/home" and will return a redirect to
        the portal after login.  The _failure_ parameter is optional.  If _failure_
        is not specified, and the login attempt fails, this method returns a JSON
        error response.  If _failure_ is specified, and the login attempt fails, then
        this method will redirect to a named URL, identified by "/login-failed".
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  description: The login name of the authenticating user
                  type: string
                password:
                  description: The password of the authenticating user
                  type: string
                success:
                  description: 'The redirect success location (defaults to: /home)'
                  type: string
                failure:
                  description: Optional redirect failure location (e.g. /login-failed
                  type: string
              required:
              - password
              - username
        required: true
      responses:
        "303":
          content: {}
          description: Login successful. Redirects to home page
        "401":
          content: {}
          description: The caller cannot be authenticated
        "403":
          content: {}
          description: The caller is not allowed to access this resource
        "500":
          content: {}
          description: Internal Server Error
      summary: Login to API Manager
      tags:
      - Login
  /metrics/fields:
    get:
      description: Retrieves a set of metric fields that may be used when querying
        or interpreting the summary and timeline reports.  The __metricType__ is the
        metric name.  The __aggreggateName__ is the metric name for the aggregated
        __metricType__.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/MetricField'
                type: array
          description: OK
        "404":
          content: {}
          description: Monitoring is disabled
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets a list of metric field names available for summary and timeline
        queries.
      tags:
      - Metrics
  /metrics/reports/{type}/summary/{level}:
    get:
      parameters:
      - description: The report type, either 'app' or 'api'
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: The report level (0 or 1 for drill-through)
        in: path
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: The starting date/time for the report.
        in: query
        name: from
        required: true
        schema:
          type: string
      - description: The end date/time for the report.
        in: query
        name: to
        required: true
        schema:
          type: string
      - description: Filter a specific client ID (multiple permitted).
        explode: true
        in: query
        name: client
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter a specific service name (multiple permitted).
        explode: true
        in: query
        name: service
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter a specific method.
        in: query
        name: method
        schema:
          type: string
      - description: Filter a specific organziation.
        in: query
        name: organization
        schema:
          type: string
      - description: 'Define the report subtype. Allowed values are : ''original'',
          ''trafficAll'' or ''trafficSubset''. Defaults to ''original'' if absent'
        in: query
        name: reportsubtype
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Monitoring is disabled
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets a summary report for application usage
      tags:
      - Metrics
  /metrics/reports/{type}/timeline/{level}/{metricType}:
    get:
      description: Produces a timeline report for a __metricType__ over a specified
        time range.  The __from__ and __two__ parameters should be a URL encoded ISO-8601
        combined date and time format (e.g. 2013-03-13T00%3A00%3A00Z).  The __metricType__
        name is one of the types returned from [fields](#APIMetricsgetMetricFields).
      parameters:
      - description: The report type, either 'app' or 'api'
        in: path
        name: type
        required: true
        schema:
          type: string
      - description: The report level (0 or 1 for drill-through)
        in: path
        name: level
        required: true
        schema:
          format: int32
          type: integer
      - description: The starting date/time for the report.
        in: query
        name: from
        required: true
        schema:
          type: string
      - description: The end date/time for the report.
        in: query
        name: to
        required: true
        schema:
          type: string
      - description: Filter a specific client ID (multiple permitted).
        explode: true
        in: query
        name: client
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter a specific service name (multiple permitted).
        explode: true
        in: query
        name: service
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter a specific method.
        in: query
        name: method
        schema:
          type: string
      - description: Filter a specific organziation.
        in: query
        name: organization
        schema:
          type: string
      - description: The metric type to query.
        in: path
        name: metricType
        required: true
        schema:
          type: string
      - description: 'Define the report subtype. Allowed values are : ''original'',
          ''trafficAll'' or ''trafficSubset''. Defaults to ''original'' if absent'
        in: query
        name: reportsubtype
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricTimeline'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "404":
          content: {}
          description: Monitoring is disabled
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets a timeline report for application usage
      tags:
      - Metrics
  /migrate/applications/export:
    post:
      description: 'Creates an export file based on options including the password
        used to encrypt the resulting export, export elements: apikeys, oauth & quotas,
        the filename of the export, and the list of application ids for inclusion
        in the export. The exported data is returned as part of the response body'
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                apikeys:
                  description: True/False. Include/Exclude api keys
                  type: string
                oauth:
                  description: True/False. Include/Exclude oauth credentials
                  type: string
                quota:
                  description: True/False. Include/Exclude quotas, if available
                  type: string
                filename:
                  description: The name of the export file
                  type: string
                password:
                  description: The password used to encrypt the exported file
                  type: string
                appIds:
                  description: The list of identifiers for the applications to be
                    exported
                  items:
                    type: string
                  type: array
              required:
              - apikeys
              - oauth
              - quota
        required: true
      responses:
        "200":
          content: {}
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates an export of applications based on the export options posted
        in a form data
      tags:
      - Migrate
  /migrate/applications/export/create:
    post:
      description: 'Creates a set of export options associated with the current http
        session. Options include the password used to encrypt the resulting export,
        export elements: apikeys, oauth & quotas, the filename of the export, and
        the list of application ids for inclusion in the export. The exported data
        can be retrieved subsequently with a GET request'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportOptions'
        description: The options for creating an application export file
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a set of export options associated with the current http session
      tags:
      - Migrate
      x-codegen-request-body-name: body
  /migrate/applications/export/download:
    get:
      description: Retrieves the export options associated with the current user HTTP
        session and creates a stream or returns the exported data in response body.
      parameters:
      - description: Optional. If present this method will return an octet stream
          with an file attachment of the same name
        in: query
        name: filename
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Exports Application data for migration to other API Gateways
      tags:
      - Migrate
  /migrate/applications/export/json:
    post:
      description: 'Creates an export file based on options including the password
        used to encrypt the resulting export, export elements: apikeys, oauth & quotas,
        the filename of the export, and the list of application ids for inclusion
        in the export. The exported data is returned as part of the response body'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportOptions'
        description: Export options
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates an export of applications based on the export options posted
        as a JSON object
      tags:
      - Migrate
      x-codegen-request-body-name: body
  /migrate/applications/import:
    post:
      description: Imports a set of applications and assocated API Keys and OAuth
        credentials, encrypted files require a decryption password
      parameters:
      - description: The type of application response required. THe only valid option
          is iframe - this is for ajax based calls that require an iFrame, i.e. Internet
          Explorer version prior to version 9.
        in: query
        name: type
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: The file containing application data to be imported
                  format: binary
                  type: string
                password:
                  description: Password to be used for decryption
                  type: string
                organizationId:
                  description: The Organization to associate the imported applications
                    with. If applicable, for Core OAuth this parameter will be ignored
                  type: string
                userId:
                  description: The user to associate the applications with. Default
                    is the API Admin
                  type: string
              required:
              - file
              - organizationId
              - userId
        required: true
      responses:
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Imports applications to the API Gateway
      tags:
      - Migrate
  /oauthclientprofiles:
    get:
      description: Return a list of OAuth Client Profiles for use in authorising API
        access to backend APIs.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReferencedEntity'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
      security:
      - basic: []
      summary: Get a list of OAuth profiles for use in backend API authorisation
      tags:
      - API Manager Services
  /organizations:
    get:
      description: "Get the list of organizations that are visible to the authenticated\
        \ user.  Only API Administrators may list all organizations, all other users\
        \ will see their organization.  The list of organizations can be filtered\
        \ using the expression: field=__field__&op=__op__&value=__value__.  Optionally,\
        \ you can add a logical operation for all expressions, using the form: &lop=AND|OR.\
        \  By default, the logical operation is AND.  Multiple expression filters\
        \ can be used, specifying field, op, and value for each filter. The __field__\
        \ is one of:\n\napiid\n:\tMatches the organization if the organization is\
        \ using the API, specified by ID\n\ndescription\n:\tThe organization's description\n\
        \nemail\n:\tThe organization's contact email address\n\nenabled\n: \tThe enabled\
        \ state of the organization, one of: enabled, disabled\n\ncreatedOn\n:\tThe\
        \ date the organization was created on, time in ms, e.g.: 1372755998542\n\n\
        name\n:\tThe name of the organization\n\nphone\n:\tThe organization's contact\
        \ phone\n\nThe __op__ is an operation and is one of:\n\neq\n:\tEqual\n\nne\n\
        :\tNot equal\n\ngt\n: \tGreater than\n\nlt\n: \tLess than\n\nge\n: \tGreater\
        \ than or equal\n\nle\n: \tLess than or equal\n\nlike\n:\tLike\n\ngete\n:\
        \ \tGreater than or equal to, and less than or equal to; the __value__ should\
        \ be a lower-minimum and upper-maximum separated by comma, e.g: value=5,10\n\
        \nThe __value__ will be compared against the __field__, according to the supplied\
        \ __op__. "
      parameters:
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: List all organizations
      tags:
      - Organizations
    post:
      description: Creates a new organization.  Only API Administrators may create
        organizations.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "413":
          content: {}
          description: Request Entity Too Large
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new organization
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /organizations/{id}:
    delete:
      description: Deletes an organization. Deleting an organization will result in
        all users and associated applications being deleted
      parameters:
      - description: The organization ID to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete an organization
      tags:
      - Organizations
    get:
      description: Retrieves the details of an organization.
      parameters:
      - description: The organization ID to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get an organization
      tags:
      - Organizations
    put:
      description: Updates an organization.
      parameters:
      - description: The organization ID to update.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Update the details of an organization
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /organizations/{id}/apis:
    get:
      description: Get the list of aproved APIs for the organization
      parameters:
      - description: The organization ID who's approved APIs are required.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the list of approved APIs for the organization
      tags:
      - Organizations
    post:
      description: Grants access to an API for an organization.  Only the API Admin
        may call this method.
      parameters:
      - description: The organization ID requesting access to an API.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/APIAccess'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: Created
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Grants access to an API for an organization.
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /organizations/{id}/apis/{apiAccessId}:
    delete:
      description: Permanently deletes access to an API for an organization.  Deleting
        API access will also delete API access to any application.
      parameters:
      - description: The organization ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The API access ID.
        in: path
        name: apiAccessId
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes access to an API for an organization
      tags:
      - Organizations
    put:
      description: Updates access to an API for an organization.  Only __enabled__
        may be modified, and disabling access will also disable access to all applications
        that may be using it.
      parameters:
      - description: The organization ID.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The API access ID.
        in: path
        name: apiAccessId
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/APIAccess'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIAccess'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates access to an API for an organization
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /organizations/{id}/image:
    get:
      description: Returns the jpeg image associated with an organization.
      parameters:
      - description: The organization ID whos image is to be returned
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the image for an organization
      tags:
      - Organizations
    post:
      description: Set the jpeg image to be associated with an organization.
      parameters:
      - description: The organization ID whos image is to be set
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "413":
          content: {}
          description: Request Entity Too Large
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Set the image for an organization
      tags:
      - Organizations
  /organizations/{id}/tokens:
    get:
      description: Retrieves the registration codes for an organization.
      parameters:
      - description: The organization ID whos tokens are to be returned.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegistrationToken'
                type: array
          description: OK
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get registration codes for an organization
      tags:
      - Organizations
    post:
      description: Create a registration code for self service onboarding of users
        to the organization
      parameters:
      - description: The organization ID to be associated with the registration code.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationToken'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationToken'
          description: Created
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Create a registration code
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /organizations/{id}/tokens/{token}:
    delete:
      description: Delete the registration code.
      parameters:
      - description: The organization ID associated with the registration code.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The registration code to be deleted.
        in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Delete the registration code
      tags:
      - Organizations
    get:
      description: Retrieves the registration code.
      parameters:
      - description: The organization ID associated with the registration code.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The registration code to be returned.
        in: path
        name: token
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RegistrationToken'
                type: array
          description: OK
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get registration code
      tags:
      - Organizations
    put:
      description: Update a registration code for self service onboarding of users
        to the organization
      parameters:
      - description: The organization ID to be associated with the registration code.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: path
        name: token
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationToken'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegistrationToken'
          description: OK
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Update a registration code
      tags:
      - Organizations
      x-codegen-request-body-name: body
  /policies:
    get:
      description: 'Returns the list of policies (of the specified type) that are
        available to Portal-registered APIs.  __type__ is one of: faulthandler, globalrequest,
        globalresponse, request, routing, response, promotion, authentication or token-info.'
      parameters:
      - description: 'The type of policy to return. Possible values are: ''faulthandler'',
          ''globalrequest'', ''globalresponse'', ''request'', ''routing'', ''response'',
          ''authentication'', ''oauthtokeninfo'', ''promotion'''
        in: query
        name: type
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReferencedEntity'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
      security:
      - basic: []
      summary: Gets a list of the specified policies
      tags:
      - API Manager Services
  /proxies:
    get:
      description: "Returns a list of API that are visible to the authenticated user.\
        \  The list of API can be filtered using the expression: field=__field__&op=__op__&value=__value__.\
        \  Optionally, you can add a logical operation for all expressions, using\
        \ the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple\
        \ expression filters can be used, specifying field, op, and value for each\
        \ filter. The __field__ is one of:\n\nname\n:      The name of the API\n\n\
        apiid\n:      Matches the API if the API is virtualized from the specified\
        \ backend API\n\ncreatedOn\n:      The date the user was created on, time\
        \ in ms, e.g.: 1372755998542\n\ndeprecated\n:      The deprecated state of\
        \ the API, one of: true or false\n\nretired\n:      The retired state of the\
        \ API, one of: true or false\n\nstate\n:      The API's state, one of: unpublished,\
        \ pending, or published\n\nThe __op__ is an operation and is one of:\n\neq\n\
        :      Equal\n\nne\n:      Not equal\n\ngt\n:      Greater than\n\nlt\n: \
        \     Less than\n\nge\n:      Greater than or equal\n\nle\n:      Less than\
        \ or equal\n\nlike\n:      Like\n\ngete\n:      Greater than or equal to,\
        \ and less than or equal to; the __value__ should be a lower-minimum and upper-maximum\
        \ separated by comma, e.g: value=5,10\n\nThe __value__ will be compared against\
        \ the __field__, according to the supplied __op__. "
      parameters:
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VirtualizedAPI'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Queries a list of frontend API.
      tags:
      - API Proxy Registration
    post:
      description: The [VirtualizedAPI apiId](VirtualizedAPI.html#apiId) is required.  If
        creating the APIas an API administrator, the [VirtualizedAPI organizationId](VirtualizedAPI.html#organizationId)
        must also be specified.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualizedAPI'
        description: The frontend API to create.
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new API proxy from a backend API.
      tags:
      - API Proxy Registration
      x-codegen-request-body-name: body
  /proxies/export:
    post:
      description: Creates an export for use in promoting the API to a new environment.  The
        export contains the frontend [VirtualizedAPI](VirtualizedAPI.html), their
        settings, and all backend [APIDefinition](APIDefinition.html) that are required
        for the frontend API.  If **password** is supplied, the exported file will
        be encrypted with the password.  If successful, returns **201 Created**, and
        the HTTP `Location` header contain the of the URL of the export. The export
        is temporary, and may only be downloaded once.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                id:
                  description: The frontend API identifier(s) to export.
                  items:
                    type: string
                  type: array
                password:
                  description: Encrypts the list of API using the password.
                  type: string
                filename:
                  description: Optional filename to use in response.
                  type: string
              required:
              - filename
              - id
              - password
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates an API export.
      tags:
      - API Proxy Registration
  /proxies/export/{id}:
    get:
      description: The API export is produced from [/exportApis](APIProxyRegistration.html#APIProxyRegistrationexportApis).  If
        __filename__ is supplied, the download will use it as the `Content-Disposition`
        filename attachment.
      parameters:
      - description: The export identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The export will be downloaded using a Content-Dispostion using
          the supplied filename
        in: query
        name: filename
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/APIPromotion'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Downloads an API export.
      tags:
      - API Proxy Registration
  /proxies/grantaccess:
    post:
      description: Function to macro-apply access to selected API.  The access can
        be granted to organizations or entities having access to specified API. If
        **action** is _all_orgs_, access will be granted to all organizations; if
        **action** is _orgs_, access will be granted to the organization(s) specified
        by **grantOrganizations**; if **action** is _orgs\_with\_apis_, access will
        be granted to the organizations with access to the apis specified by **grantApis**.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                action:
                  description: 'Grant action to perform. Possible values are: all\_orgs,
                    orgs, and orgs\_with\_apis.'
                  type: string
                apiId:
                  description: List of API ID to which access will be granted.
                  items:
                    type: string
                  type: array
                grantOrgId:
                  description: List of target organization ID to which access to _apiId_
                    will be granted (action is _orgs_)
                  items:
                    type: string
                  type: array
                grantApiId:
                  description: List of API ID to which access to to _apiId_ will be
                    granted (action is _orgs\_with\_apis_).
                  items:
                    type: string
                  type: array
              required:
              - action
              - apiId
              - grantApiId
              - grantOrgId
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Macro function to grant API access.
      tags:
      - API Proxy Registration
  /proxies/import:
    post:
      description: Imports API, previously exported using [/exportApis](APIProxyRegistration.html#APIProxyRegistrationexportApis).  If
        the API was exported using a password, then the file is encrypted, and a **password**
        argument must be provided to decrypt.  The import will create  [VirtualizedAPI](VirtualizedAPI.html),
        their settings, and all backend [APIDefinition](APIDefinition.html) necessary
        to support the frontend API.  This method is similar to [/importFromUrl](APIProxyRegistration.html#APIProxyRegistrationimportFromUrl),
        save that this method supports traditional form-based file upload, using `multipart/form-data`.
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                organizationId:
                  description: The organization identifier.
                  type: string
                password:
                  description: Optional password to decrypt the import file.
                  type: string
                file:
                  description: The data file to import.
                  format: binary
                  type: string
              required:
              - file
              - organizationId
              - password
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Imports a previously exported API.
      tags:
      - API Proxy Registration
  /proxies/importFromUrl:
    post:
      description: Imports API, previously exported using [/exportApis](APIProxyRegistration.html#APIProxyRegistrationexportApis).  If
        the API was exported using a password, then the file is encrypted, and a **password**
        argument must be provided to decrypt.  The import will create  [VirtualizedAPI](VirtualizedAPI.html),
        their settings, and all backend [APIDefinition](APIDefinition.html) necessary
        to support the frontend API.  The **url** should be a [data URI scheme](http://en.wikipedia.org/wiki/Data_URI_scheme).
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                organizationId:
                  description: The organization identifier.
                  type: string
                url:
                  description: The data URI.
                  type: string
                password:
                  description: Optional password to decrypt the import file.
                  type: string
              required:
              - organizationId
              - password
              - url
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Imports a previously exported API.
      tags:
      - API Proxy Registration
  /proxies/promote:
    post:
      description: In API Manager, API promotion must first be enabled in Settings.
        Also, in Policy Studio (Server Settings -> API Manager -> API Promotion) a
        promotion policy must be selected. By default a sample promotion policy is
        installed
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                apiId:
                  description: The frontend API identifier(s) to promote
                  items:
                    type: string
                  type: array
              required:
              - apiId
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Invokes the internal API promotion policy for the specified API.
      tags:
      - API Proxy Registration
  /proxies/upgrade/{id}:
    post:
      description: During an API lifecycle, it is necessary to upgrade users to use
        a newer frontend API.  The idea being that the old frontend API should be
        phased-out, and developers should move their applications to use the newer
        frontend API. This method assigns all organizations and applications the same
        access to the new frontend API (identified by **upgradeApiId**) that they
        have to the old API (identified by **id**). Optionally, the old frontend API
        may be deprecated or retired using **deprecate**, **retire**, or scheduled
        to be retired using **retirementDate**. If specified, the **retirementDate**
        should be in the ISO-8601 format of yyyy-MM-ddTHH:mm:ssZ (e.g. 2015-01-01T12:00:00Z).
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                upgradeApiId:
                  description: The id of the frontend API which will be used to upgrade
                    this virtualized API
                  type: string
                deprecate:
                  description: Specifies whether or not the API being upgraded should
                    be depreated
                  type: boolean
                retire:
                  description: Specifies whether or not the API being upgraded should
                    be retired
                  type: boolean
                retirementDate:
                  description: Specifies the retirement date of the the API being
                    upgraded if its being retired
                  type: string
              required:
              - deprecate
              - retire
              - retirementDate
              - upgradeApiId
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Upgrades an existing frontend API to a newer frontend API.
      tags:
      - API Proxy Registration
  /proxies/{id}:
    delete:
      description: Deletes an API proxy, removing all API access in the process.
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes an API proxy.
      tags:
      - API Proxy Registration
    get:
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets a frontend API by ID.
      tags:
      - API Proxy Registration
    put:
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualizedAPI'
        description: The virtualized API to update
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an API proxy.
      tags:
      - API Proxy Registration
      x-codegen-request-body-name: body
  /proxies/{id}/deprecate:
    post:
      description: Only an API Administrator may deprecate an API, and only _published_
        API may be deprecated.  When an API is _deprecated_, the API can still be
        used, but users will be informed that the API has been deprecated.  Optionally,
        a **retirementDate** may be set which will schedule the API to be automatically
        retired and removed from use. If specified, the **retirementDate** should
        be in the ISO-8601 format of yyyy-MM-ddTHH:mm:ssZ (e.g. 2015-01-01T12:00:00Z).
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                retirementDate:
                  description: Optional API retirement date specified in supported
                    ISO-8601 format.  Set to the past to retire immediately.
                  type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: Created
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deprecates the API.
      tags:
      - API Proxy Registration
  /proxies/{id}/image:
    get:
      description: Returns the jpeg image associated with the API.
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content: {}
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets the image for the API.
      tags:
      - API Proxy Registration
    post:
      description: Set the jpeg image to be associated with the API.
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  format: binary
                  type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "413":
          content: {}
          description: Request Entity Too Large
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Set the image for the frontend API.
      tags:
      - API Proxy Registration
  /proxies/{id}/operations:
    get:
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/VirtualizedAPIMethod'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets a list of methods that are avilable to the API proxy.
      tags:
      - API Proxy Registration
  /proxies/{id}/operations/{operationId}:
    delete:
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The frontend API method identifier.
        in: path
        name: operationId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes an API method by ID.
      tags:
      - API Proxy Registration
    get:
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The frontend API method identifier.
        in: path
        name: operationId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPIMethod'
          description: OK
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Gets an API method by ID.
      tags:
      - API Proxy Registration
    put:
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: The frontend API method identifier.
        in: path
        name: operationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VirtualizedAPIMethod'
        description: The method to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPIMethod'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates an API proxy operation.
      tags:
      - API Proxy Registration
      x-codegen-request-body-name: body
  /proxies/{id}/publish:
    post:
      description: If called by an API Administrator, then the API state will be _published_,
        otherwise the API state will be _pending_, and an email notification will
        be sent to the API Administrators, notifying them of the event. Optionally,
        on publishing, a new **name** for the API may be specified.  Similarly, an
        optional **vhost** may be specified.  The **vhost** is an externally resolvable
        virtual host from which the API will be accessed.
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: The name on which to publish this API.
                  type: string
                vhost:
                  description: The optional virtual host on which to publish this
                    API.
                  type: string
              required:
              - name
              - vhost
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Publish the API.
      tags:
      - API Proxy Registration
  /proxies/{id}/undeprecate:
    post:
      description: Only an API Administrator may undeprecate an API, and only _published_
        API, that are deprecated, may be undeprecated.
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Undeprecates the API.
      tags:
      - API Proxy Registration
  /proxies/{id}/unpublish:
    post:
      description: Only an API Administrator may unpublish an API.  When an API is
        _unpublished_, all access to the API is revoked from all applications, and
        all organizations, save the API development organization that owns the API.
      parameters:
      - description: The frontend API identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualizedAPI'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Unpublish the API.
      tags:
      - API Proxy Registration
  /quotas:
    get:
      description: This method may be called by any member of the Portal, however
        only the API Administrator may retrieve the system quota.
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns all quotas
      tags:
      - Quotas
    post:
      description: Creates a new quota.  Only API Administrators may create quotas.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaDTO'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
          description: Created
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new quota
      tags:
      - Quotas
      x-codegen-request-body-name: body
  /quotas/{id}:
    delete:
      description: Deletes a quota.  Only API Administrators may update quotas.  Default
        system and application quotas may not be deleted.
      parameters:
      - description: The quota ID to delete.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Deletes a quota
      tags:
      - Quotas
    get:
      description: Returns a quota.  This method may be called by any member of the
        Portal, however, only API Administrators may retrieve the system quota.
      parameters:
      - description: The quota ID to retrieve.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns the quota with the given ID
      tags:
      - Quotas
    put:
      description: Updates an existing quota. Only API Administrators may update quotas.
      parameters:
      - in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuotaDTO'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuotaDTO'
          description: OK
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates a quota
      tags:
      - Quotas
      x-codegen-request-body-name: body
  /remotehosts:
    get:
      description: Returns a list of API Manager-registered remote hosts.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/RemoteHost'
                type: array
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Returns a list of remote hosts
      tags:
      - API Manager Services
    post:
      description: Creates a new API Manager-regsitered remote host. Dynamically updates
        the API Gateway runtime so that the remote host is available.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHost'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHost'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Creates a new remote host
      tags:
      - API Manager Services
      x-codegen-request-body-name: body
  /remotehosts/{id}:
    delete:
      description: Deletes an API Manager-registered remote host. Dynamically removes
        the remote host from the API Gateway runtime.
      parameters:
      - description: The remote host identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Deletes a remote host.
      tags:
      - API Manager Services
    put:
      description: Updates an API Manager-registered remote host. Dynamically updates
        the API Gateway runtime so that the new remote host settings are available.
      parameters:
      - description: The remote host identifier.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RemoteHost'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoteHost'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates a remote host
      tags:
      - API Manager Services
      x-codegen-request-body-name: body
  /service-discovery/{instance}/{type}:
    post:
      description: 'Returns a list of services hosted on the specified Gateway instance.  __type__
        is one of: rest, wsdl.'
      parameters:
      - in: path
        name: instance
        required: true
        schema:
          type: string
      - description: 'The type of service to return. Possible values are: ''rest'',
          ''wsdl'''
        in: path
        name: type
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                host:
                  type: string
                port:
                  type: string
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Swagger'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Returns a list of services hosted on the specified Gateway instance
      tags:
      - API Manager Services
  /sysconfig:
    get:
      description: Returns an API Manager system configuration object.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Gets API Manager system configuration
      tags:
      - API Manager Services
    put:
      description: Returns an API Manager system configuration object.
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SystemConfig'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemConfig'
          description: OK
        "403":
          content: {}
          description: Forbidden
      security:
      - basic: []
      summary: Update API Manager system configuration
      tags:
      - API Manager Services
      x-codegen-request-body-name: body
  /title:
    get:
      description: Returns the API Manager title.  Does not require authentication.
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: OK
      summary: Gets the API Manager's title
      tags:
      - API Manager Services
  /tokenstores:
    get:
      description: Returns a list of Token Stores to be used by OAuth Security Devices
        for inbound security on portal-registered APIs.
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ReferencedEntity'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
      security:
      - basic: []
      summary: Gets a list of Token Stores
      tags:
      - API Manager Services
  /topology:
    post:
      description: Retrieves the Topology from the specified Admin Node Manager
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                host:
                  description: The host on which the Admin Node Manager is running
                  type: string
                port:
                  description: The Admin Node Manager management port.
                  type: string
                username:
                  description: Username to use for Admin Node Manager authentication
                    .
                  type: string
                password:
                  description: Password to use for Admin Node Manager authentication.
                  type: string
              required:
              - host
              - password
              - port
              - username
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Topology'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Retrieves the Topology from the specified Admin Node Manager
      tags:
      - API Manager Services
  /users:
    get:
      description: "Returns a list of users that are visible to the authenticated\
        \ user.  The list of users can be filtered using the expression: field=__field__&op=__op__&value=__value__.\
        \  Optionally, you can add a logical operation for all expressions, using\
        \ the form: &lop=AND|OR.  By default, the logical operation is AND.  Multiple\
        \ expression filters can be used, specifying field, op, and value for each\
        \ filter. The __field__ is one of:\n\napiid\n:      Matches the user if the\
        \ user has explicit access to application(s) that are using the API, specified\
        \ by ID\n\nappid\n:      Matches the user if the user has explicit access\
        \ to the application, specified by ID\n\ndescription\n:      The user's description\n\
        \nemail\n:      The user's email address\n\nenabled\n:      The enabled state\
        \ of the user, one of: enabled, disabled\n\ncreatedOn\n:      The date the\
        \ user was created on, time in ms, e.g.: 1372755998542\n\nmobile\n:      The\
        \ user's mobile phone\n\nname\n:      The name of the user\n\nloginName\n\
        :\t\tThe login name of the user\n\norgid\n:      Matches the user if the user\
        \ is a member of the organization, specified by ID\n\nphone\n:      The user's\
        \ phone\n\nrole\n:      The user's role, one of: user or oadmin\n\nstate\n\
        :      The user's current state, one of: approved, pending\n\nsurname\n: \
        \     The surname of the user\n\nThe __op__ is an operation and is one of:\n\
        \neq\n:      Equal\n\nne\n:      Not equal\n\ngt\n:      Greater than\n\n\
        lt\n:      Less than\n\nge\n:      Greater than or equal\n\nle\n:      Less\
        \ than or equal\n\nlike\n:      Like\n\ngete\n:      Greater than or equal\
        \ to, and less than or equal to; the __value__ should be a lower-minimum and\
        \ upper-maximum separated by comma, e.g: value=5,10\n\nThe __value__ will\
        \ be compared against the __field__, according to the supplied __op__. "
      parameters:
      - description: Filter field name.
        explode: true
        in: query
        name: field
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter operation.
        explode: true
        in: query
        name: op
        schema:
          items:
            type: string
          type: array
        style: form
      - description: Filter value
        explode: true
        in: query
        name: value
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: OK
        "400":
          content: {}
          description: Bad Request
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Obtains a list of users
      tags:
      - Users
    post:
      description: Creates a new user on the system.  Only Organization Administrators
        and API Manager Administrators may create users. Custom properties can be
        included on create.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Created
        "400":
          content: {}
          description: Bad Request
        "403":
          content: {}
          description: Forbidden
        "413":
          content: {}
          description: Request Entity Too Large
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Admin function to create a new user on the system
      tags:
      - Users
      x-codegen-request-body-name: body
  /users/forgotpassword:
    post:
      description: When this method is invoked, an email is sent to the owner of _email_
        to verify that they wish for their password to be reset. The owner of _email_
        must click on a link to reset the password. The link should direct the user
        to [/resetpassword](#APIUsersresetForgottenPassword) with appropriate query
        paremeters. Redirect URLs may be specified for success and failure conditions.
        If redirect URLs are specified, they must be a known Static File listener
        configured in the gateway or the request will be rejected.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                email:
                  description: The email address of the user.
                  type: string
                success:
                  description: The redirect success location (e.g. /request-forgotten-pw-success)
                  type: string
                failure:
                  description: The redirect failure location (e.g. /request-forgotten-pw-failed)
                  type: string
              required:
              - email
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "303":
          content: {}
          description: See Other
        "400":
          content: {}
          description: Bad Request
      summary: Allows a user to reset their password.
      tags:
      - Users
  /users/register:
    post:
      description: Allows a user to register for an account on the system. A validation
        email request is sent to the provided email address to confirm ownership.
        The email should contain a link to [/validateuser](#APIUsersvalidateUser)
        with appropriate parameters. User properties (including custom properties)
        may be supplied as form parameters. The method will return JSON, but optionally,
        redirect URLs may be specified for success and failure conditions. If redirect
        URLs are specified, they must be a known Static File listener configured in
        the gateway or the request will be rejected.
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  description: The name of the user to register.
                  type: string
                email:
                  description: The unique email address of the user to register.
                  type: string
                password:
                  description: The password of the user to register.
                  type: string
                token:
                  description: The registration token to use.
                  type: string
                success:
                  description: The redirect success location (e.g. '/registration-success')
                  type: string
                failure:
                  description: The redirect failure location (e.g. '/registration-failed')
                  type: string
              required:
              - email
              - name
              - password
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "303":
          content: {}
          description: See Other
        "400":
          content: {}
          description: Bad Request
      summary: Register a new user.
      tags:
      - Users
  /users/resetpassword:
    get:
      description: User validation code and email address are expected as query string
        parameters.  When invoked, an email will be sent to the user with their new
        password.
      parameters:
      - description: The email address of the user being validated.
        in: query
        name: email
        required: true
        schema:
          type: string
      - description: Validation string for the user entry.
        in: query
        name: validator
        required: true
        schema:
          type: string
      responses:
        "303":
          content: {}
          description: See Other
        "404":
          content: {}
          description: Not Found
      summary: Validates the user [/forgotpassword](#APIUsersforgotUserPassword) password
        request.
      tags:
      - Users
  /users/validateuser:
    get:
      description: User validation code and email address are expected as query parameters.
      parameters:
      - description: The email address of the user being validated.
        in: query
        name: email
        required: true
        schema:
          type: string
      - description: Validation string for the user entry.
        in: query
        name: validator
        required: true
        schema:
          type: string
      responses:
        "303":
          content: {}
          description: See Other
        "400":
          content: {}
          description: Bad Request
      summary: Validates the user [/register](#APIUsersregisterUser) request.
      tags:
      - Users
  /users/{id}:
    delete:
      description: Deletes a user with the given user ID.  All the applications and
        keys associated with the deleted user remain in the organization and can be
        managed by the Organization Administrator or the API Administrator.  The API
        Administrator can delete any user.  The Organization Administrators can only
        delete users belonging to their organizations..
      parameters:
      - description: The user ID to delete
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
      security:
      - basic: []
      summary: Deletes a user.
      tags:
      - Users
    get:
      description: Retrieves user details, given a user ID.  The API Manager Administrator
        may access all users, otherwise, the user ID must be a member of the authenticated
        user's own organization.
      parameters:
      - description: The ID of the user to be retreived.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "404":
          content: {}
          description: Not Found
      security:
      - basic: []
      summary: Retrieves the details for a given user.
      tags:
      - Users
    put:
      description: Updates user details, given a user ID.  The API Manager Administrator
        may update all users, otherwise, the user ID must be a member of the authenticated
        user's own organization and the authenticated user must be an Organization
        Administrator.
      parameters:
      - description: The ID of the user being updated.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Updates the details for a given user.
      tags:
      - Users
      x-codegen-request-body-name: body
  /users/{id}/approve:
    post:
      description: Approving user must be API Manager Administrator or an Organization
        Administrator of the user's organization with the correct privileges to approve
        new user requests.
      parameters:
      - description: The ID of the user to be approved.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Created
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Grants approval to a request to create a new user on the system.
      tags:
      - Users
  /users/{id}/changepassword:
    post:
      description: The authenticated user must be API Manager Administrator or an
        Organization Administrator of the user's organization with the correct privileges
        to invoke this method.
      parameters:
      - description: The ID of the user being updated.
        in: path
        name: id
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                newPassword:
                  description: The new password of the user being updated.
                  type: string
              required:
              - newPassword
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: Unauthorized
        "404":
          content: {}
          description: Not Found
      security:
      - basic: []
      summary: Updates the password for a given user.
      tags:
      - Users
  /users/{id}/image:
    get:
      description: Returns the jpeg image associated with an user.
      parameters:
      - description: The user ID whos image is to be returned
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Get the image for a user
      tags:
      - Users
    post:
      description: Set the jpeg image to be associated with a user.
      parameters:
      - description: The user ID for which an image is to be updated
        in: path
        name: id
        required: true
        schema:
          type: string
      - description: This value should be unset
        in: query
        name: type
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: The file input data
                  format: binary
                  type: string
              required:
              - file
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "400":
          content: {}
          description: Bad Request
        "413":
          content: {}
          description: Request Entity Too Large
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Set the image for a user
      tags:
      - Users
  /users/{id}/resetpassword:
    put:
      description: The authenticated user must be API Manager Administrator or an
        Organization Administrator of the user's organization with the correct privileges
        to invoke this method.
      parameters:
      - description: The ID of the user having password reset administratively.
        in: path
        name: id
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "400":
          content: {}
          description: Bad Request
        "401":
          content: {}
          description: Unauthorized
        "404":
          content: {}
          description: Not Found
        "500":
          content: {}
          description: Internal Server Error
      security:
      - basic: []
      summary: Admin level function to reset the password for a given user.
      tags:
      - Users
components:
  schemas:
    SchemaObject:
      example:
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        id: id
        $ref: '#/definitions/User'
        properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    OAuthAppScope:
      description: OAuth Application Scope
      example:
        isDefault: false
        scope: /api/oauth/protected
        id: 1e71b76a-defa-49ab-96s2-a9cd60387f31
        applicationId: 3e21b76a-defa-49ab-9682-a9cd60387e37
      properties:
        id:
          description: The unique identifier for the oauth protected resource
          example: 1e71b76a-defa-49ab-96s2-a9cd60387f31
          type: string
        applicationId:
          description: The unique identifier for the application that has this scope
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          type: string
        scope:
          description: The scope string
          example: /api/oauth/protected
          type: string
        isDefault:
          default: false
          description: Flag to indicate if this scope is one of the applications default
            scopes
          example: false
          type: boolean
      required:
      - applicationId
      - id
      type: object
    CORSProfile:
      description: CORS configuration profile.
      example:
        isDefault: false
        supportCredentials: false
        exposedHeaders:
        - X-Trace
        - X-CorrelationID
        name: Default Security Profile
        origins:
        - http://api.google.com
        - http://api.flickr.com
        allowedHeaders:
        - X-Request-Value
        - X-Hello-World
        maxAgeSeconds: 84600
      properties:
        name:
          description: Unique name of the Profile
          example: Default Security Profile
          type: string
        isDefault:
          default: false
          description: Indicates that this is the default profile.  There can be only
            one default.
          example: false
          type: boolean
        origins:
          description: List of origins for this CORS Profile
          example:
          - http://api.google.com
          - http://api.flickr.com
          items:
            type: string
          type: array
        allowedHeaders:
          description: List of headers...
          example:
          - X-Request-Value
          - X-Hello-World
          items:
            type: string
          type: array
        exposedHeaders:
          description: List of headers...
          example:
          - X-Trace
          - X-CorrelationID
          items:
            type: string
          type: array
        supportCredentials:
          default: false
          description: Specifies whether or credentials are supported for APIs/API
            Methods employing this CORS Profile.
          example: false
          type: boolean
        maxAgeSeconds:
          description: Specifies the amount of time responses to OPTIONS requests
            are stored, in seconds, in the preflight result cache
          example: 84600
          format: int64
          type: integer
      type: object
    AuthenticatedUserAttributes:
      example:
        isSSOLogin: false
        firstLogin: false
        userDn: userDn
      properties:
        firstLogin:
          default: false
          type: boolean
        isSSOLogin:
          default: false
          type: boolean
        userDn:
          type: string
      type: object
    SecurityProfile:
      description: Inbound security profile.
      example:
        isDefault: false
        devices:
        - name: My Pass-through Device
          type: apiKey
          properties:
            apiKeyFieldName: APIKey
            takeFrom: HEADER
          order: 1
        - name: My Pass-through Device
          type: apiKey
          properties:
            apiKeyFieldName: APIKey
            takeFrom: HEADER
          order: 1
        name: Default Security Profile
      properties:
        name:
          description: Unique name of the Profile
          example: Default Security Profile
          type: string
        isDefault:
          default: false
          description: Indicates that this is the default profile.  There can be only
            one default.
          example: false
          type: boolean
        devices:
          description: List of SecurityDevice for this security profile
          items:
            $ref: '#/components/schemas/SecurityDevice'
          type: array
      type: object
    APIAccess:
      description: API Access indicates whether access to an API is available
      example:
        createdBy: 3e21b76a-defa-49ab-9682-a9cd60387e37
        id: 19da5d5e-b18a-4217-abec-291033cd939c
        state: approved
        createdOn: 1364287486876
        apiId: c1c63d3b-5283-4755-ade7-e2377bd35049
        enabled: true
      properties:
        id:
          description: Unique identifier for approval decisions (includes pending
            approvals)
          example: 19da5d5e-b18a-4217-abec-291033cd939c
          type: string
        apiId:
          description: Virtualised REST API unique id
          example: c1c63d3b-5283-4755-ade7-e2377bd35049
          type: string
        createdBy:
          description: The unique identifier for user that requested access
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        state:
          description: Pending or approved state
          example: approved
          type: string
        createdOn:
          description: 'Epoch/Unix time stamp when the approval decision was created '
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        enabled:
          default: false
          description: Flag disables access to an API for organization or application
          example: true
          type: boolean
      type: object
    VirtualizedAPIMethod:
      description: Represents a virtualized API method as part of a frontend API.
      example:
        summary: This is a summary of my API Method
        descriptionType: original
        name: MyMethod
        descriptionUrl: https://myapi.org/docs/api#method
        descriptionMarkdown: ${environment.VINSTDIR}/../markdown/myapi/method.md
        id: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
        descriptionManual: This is _my_ API method
        apiMethodId: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
        virtualizedApiId: bacb827e-e555-43fa-b006-50c7404aa990
        apiId: ec5e0a01-832b-4ecb-8cae-b35630527bb4
        tags:
          Category:
          - Social Network, Photos
          Type:
          - REST
      properties:
        id:
          description: Unique ID of the method.
          example: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
          type: string
        virtualizedApiId:
          description: The identifier of the [VirtualizedAPI](VirtualizedAPI.html).
          example: bacb827e-e555-43fa-b006-50c7404aa990
          type: string
        name:
          description: The virtualized method name.  This defaults to the original
            [APIDefinition](APIDefinition.html) method name.
          example: MyMethod
          type: string
        apiId:
          description: The reference identifier for the original [APIDefinition](APIDefinition.html)
            that was virtualized.
          example: ec5e0a01-832b-4ecb-8cae-b35630527bb4
          type: string
        apiMethodId:
          description: The reference identifier for the original API [APIDefinition](APIDefinition.html)
            method that was virtualized.
          example: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
          type: string
        summary:
          description: A summary of the API Method.
          example: This is a summary of my API Method
          type: string
        descriptionType:
          description: 'The source for the method''s description.  One of: *original*,
            *manual*, *markdown*, or *url*.  Defaults to *original*.'
          example: original
          type: string
        descriptionManual:
          description: Specifies a manual description, which can be markdown text.
          example: This is _my_ API method
          type: string
        descriptionMarkdown:
          description: specifies a markdown file to use for description.
          example: ${environment.VINSTDIR}/../markdown/myapi/method.md
          type: string
        descriptionUrl:
          description: Specifies a URL to use instead of description text.
          example: https://myapi.org/docs/api#method
          type: string
        tags:
          additionalProperties:
            items:
              type: string
            type: array
          description: The list of tags associated with this API method. Each tag
            can have multiple values.
          example:
            Category:
            - Social Network, Photos
            Type:
            - REST
          type: object
      type: object
    TokenEndpoint:
      example:
        format: format
        tokenName: access_code
        description: description
        title: title
        type: string
        required:
        - required
        - required
        url: http://myapi.io/oauth/token
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        url:
          description: The URL of the token endpoint for the authentication code grant
            flow. The value should be in a URL format.
          example: http://myapi.io/oauth/token
          type: string
        tokenName:
          description: An optional alternative name to standard 'access_code' OAuth2
            parameter.
          example: access_code
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    SecurityDevice:
      description: Inbound security device.
      example:
        name: My Pass-through Device
        type: apiKey
        properties:
          apiKeyFieldName: APIKey
          takeFrom: HEADER
        order: 1
      properties:
        name:
          description: Unique name of the Security Device.
          example: My Pass-through Device
          type: string
        type:
          description: 'The Security device type.  Values are one of: *apiKey*, *awsHeader*,
            *awsQuery*, *basic*, *authPolicy*, *oauth*, *oauthExternal*, *passThrough*,
            or *twoWaySSL*.'
          example: apiKey
          type: string
        order:
          description: Specifies the order in which this device will be invoked.
          example: 1
          format: int32
          type: integer
        properties:
          additionalProperties:
            type: string
          description: List of device-specific properties.
          example:
            apiKeyFieldName: APIKey
            takeFrom: HEADER
          type: object
      type: object
    QuotaDTO:
      description: The Quota is a set of restrictions that apply to applications in
        the Portal.
      example:
        system: false
        name: MyApplication Quota
        description: A set of restrictions to MyApplication
        restrictions:
        - method: 0c5f8a4a-0e74-4e66-ad7b-e21962940e02
          api: 60d1c7da-9e2e-4f57-948a-eeb1da71beca
          type: throttle
          config:
            messages: "10"
            per: "1"
            period: seconds
        - method: 0c5f8a4a-0e74-4e66-ad7b-e21962940e02
          api: 60d1c7da-9e2e-4f57-948a-eeb1da71beca
          type: throttle
          config:
            messages: "10"
            per: "1"
            period: seconds
        id: a1c70859-702b-4f3a-a1ad-a61067fdc4c7
        type: API
      properties:
        id:
          description: The quota identifier
          example: a1c70859-702b-4f3a-a1ad-a61067fdc4c7
          type: string
        type:
          description: The quota type, either API or APPLICATION
          enum:
          - API
          - APPLICATION
          type: string
        name:
          description: The name of the quota
          example: MyApplication Quota
          type: string
        description:
          description: The quota for MyApplication the overrides default Application
            quota
          example: A set of restrictions to MyApplication
          type: string
        restrictions:
          description: An array of restrictions imposed on the quota
          items:
            $ref: '#/components/schemas/QuotaApiConstraintDTO'
          type: array
        system:
          default: false
          description: Indicates if the quota is system (protected)
          example: false
          type: boolean
      required:
      - id
      - name
      - type
      type: object
    ExportOptions:
      description: Options available on export of applications
      example:
        password: "1223425"
        filename: export.dat
        appIds: '[c95b7c70-fe01-4e31-8f1f-cdd977812d7d]'
        quota: false
        apikeys: false
        oauth: true
      properties:
        filename:
          description: If specified, the name of the file that the exported applications
            will be wrote to
          example: export.dat
          type: string
        password:
          description: Password value which, when specified, will be use to encrypt
            the output stream for the export
          example: "1223425"
          type: string
        appIds:
          description: List of the application ids that was chosen for export
          example: '[c95b7c70-fe01-4e31-8f1f-cdd977812d7d]'
          items:
            type: string
          type: array
        quota:
          default: false
          description: Flag to indicate if api quota information is to be included
            in the export
          example: false
          type: boolean
        oauth:
          default: false
          description: Flag to indicate if oauth credentials are to be included in
            the export
          example: true
          type: boolean
        apikeys:
          default: false
          description: Flag to indicate if api keys are to be included in the export
          example: false
          type: boolean
      type: object
    InboundProfiles:
      description: Inbound profiles
      properties:
        securityProfile:
          description: The name of the Security Profile to be used for this Virtualized
            API.
          example: Default Inbound Security
          type: string
        corsProfile:
          description: The name of the CORS Profile to be used for this Virtualized
            API.
          example: Default CORS profile
          type: string
        monitorAPI:
          default: false
          description: Enables metrics monitoring for the API
          example: true
          type: boolean
        monitorSubject:
          description: Identifies the client for metrics monitoring
          example: authentication.subject.id
          type: string
      type: object
    APIPromotion:
      description: API promotion package.
      example:
        exportVersion: 0
        backend:
          apiBlobs:
          - blob: YmxvYg==
            name: My API
            id: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
            importURL: My API
            type: swagger11
          - blob: YmxvYg==
            name: My API
            id: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
            importURL: My API
            type: swagger11
        frontend:
          apis:
          - deprecated: true
            createdOn: 1364287486876
            organizationId: b6889722b7-222-b06f-2eaaf1548898
            path: /flikr
            expired: false
            authenticationProfiles:
            - isDefault: false
              name: Default Security Profile
              type: apikey
              parameters:
                apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
                apiKeyField: KeyId
                httpLocation: query
            - isDefault: false
              name: Default Security Profile
              type: apikey
              parameters:
                apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
                apiKeyField: KeyId
                httpLocation: query
            descriptionType: manual
            outboundProfiles:
              _default:
                authenticationProfile: My Backend
                apiMethodId: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
                routeType: proxy
                apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
            retired: false
            id: bacb827e-e555-43fa-b006-50c7404aa990
            state: unpublished
            corsProfiles:
            - isDefault: false
              supportCredentials: false
              exposedHeaders:
              - X-Trace
              - X-CorrelationID
              name: Default Security Profile
              origins:
              - http://api.google.com
              - http://api.flickr.com
              allowedHeaders:
              - X-Request-Value
              - X-Hello-World
              maxAgeSeconds: 84600
            - isDefault: false
              supportCredentials: false
              exposedHeaders:
              - X-Trace
              - X-CorrelationID
              name: Default Security Profile
              origins:
              - http://api.google.com
              - http://api.flickr.com
              allowedHeaders:
              - X-Request-Value
              - X-Hello-World
              maxAgeSeconds: 84600
            apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
            summary: |-
              My API
              ====

              This is my API.
            image: resources/photo.jpg
            serviceProfiles:
              _default:
                basePath: http://backend.io
                apiId: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
            retirementDate: 1364287486876
            inboundProfiles:
              _default:
                monitorAPI: "true"
                securityProfile: Default Inbound Security
                corsProfile: Default CORS profile
                monitorSubject: authentication.subject.id
            version: "1.0"
            securityProfiles:
            - isDefault: false
              devices:
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              name: Default Security Profile
            - isDefault: false
              devices:
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              name: Default Security Profile
            tags:
              Category:
              - Social Network, Photos
              Type:
              - REST
            vhost: host.company.com
            createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
            apiRoutingKey: "1"
            name: My virtualized API
            descriptionUrl: http://doc.api.org/myapi/mymethod#anchor
            descriptionMarkdown: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
            descriptionManual: |-
              My API
              ====

              This is my API.
            caCerts:
            - notValidBefore: 1364287486876
              inbound: false
              subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
              version: 3
              md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
              issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              signatureAlgorithm: RSA (2048 bits)
              expired: true
              certBlob: YmxvYg==
              outbound: true
              notValidAfter: 1364287486876
              name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              notYetValid: false
            - notValidBefore: 1364287486876
              inbound: false
              subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
              version: 3
              md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
              issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              signatureAlgorithm: RSA (2048 bits)
              expired: true
              certBlob: YmxvYg==
              outbound: true
              notValidAfter: 1364287486876
              name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              notYetValid: false
          - deprecated: true
            createdOn: 1364287486876
            organizationId: b6889722b7-222-b06f-2eaaf1548898
            path: /flikr
            expired: false
            authenticationProfiles:
            - isDefault: false
              name: Default Security Profile
              type: apikey
              parameters:
                apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
                apiKeyField: KeyId
                httpLocation: query
            - isDefault: false
              name: Default Security Profile
              type: apikey
              parameters:
                apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
                apiKeyField: KeyId
                httpLocation: query
            descriptionType: manual
            outboundProfiles:
              _default:
                authenticationProfile: My Backend
                apiMethodId: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
                routeType: proxy
                apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
            retired: false
            id: bacb827e-e555-43fa-b006-50c7404aa990
            state: unpublished
            corsProfiles:
            - isDefault: false
              supportCredentials: false
              exposedHeaders:
              - X-Trace
              - X-CorrelationID
              name: Default Security Profile
              origins:
              - http://api.google.com
              - http://api.flickr.com
              allowedHeaders:
              - X-Request-Value
              - X-Hello-World
              maxAgeSeconds: 84600
            - isDefault: false
              supportCredentials: false
              exposedHeaders:
              - X-Trace
              - X-CorrelationID
              name: Default Security Profile
              origins:
              - http://api.google.com
              - http://api.flickr.com
              allowedHeaders:
              - X-Request-Value
              - X-Hello-World
              maxAgeSeconds: 84600
            apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
            summary: |-
              My API
              ====

              This is my API.
            image: resources/photo.jpg
            serviceProfiles:
              _default:
                basePath: http://backend.io
                apiId: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
            retirementDate: 1364287486876
            inboundProfiles:
              _default:
                monitorAPI: "true"
                securityProfile: Default Inbound Security
                corsProfile: Default CORS profile
                monitorSubject: authentication.subject.id
            version: "1.0"
            securityProfiles:
            - isDefault: false
              devices:
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              name: Default Security Profile
            - isDefault: false
              devices:
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              - name: My Pass-through Device
                type: apiKey
                properties:
                  apiKeyFieldName: APIKey
                  takeFrom: HEADER
                order: 1
              name: Default Security Profile
            tags:
              Category:
              - Social Network, Photos
              Type:
              - REST
            vhost: host.company.com
            createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
            apiRoutingKey: "1"
            name: My virtualized API
            descriptionUrl: http://doc.api.org/myapi/mymethod#anchor
            descriptionMarkdown: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
            descriptionManual: |-
              My API
              ====

              This is my API.
            caCerts:
            - notValidBefore: 1364287486876
              inbound: false
              subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
              version: 3
              md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
              issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              signatureAlgorithm: RSA (2048 bits)
              expired: true
              certBlob: YmxvYg==
              outbound: true
              notValidAfter: 1364287486876
              name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              notYetValid: false
            - notValidBefore: 1364287486876
              inbound: false
              subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
              version: 3
              md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
              issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              signatureAlgorithm: RSA (2048 bits)
              expired: true
              certBlob: YmxvYg==
              outbound: true
              notValidAfter: 1364287486876
              name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
              notYetValid: false
          backendMethods:
          - op: MyAPI-1.0:GET:/things
            apiMethodId: 19ec174e-b217-4c60-aa40-c22040569363
            apiId: 0a275f85-aec2-4100-8f9e-b4e7abdca108
          - op: MyAPI-1.0:GET:/things
            apiMethodId: 19ec174e-b217-4c60-aa40-c22040569363
            apiId: 0a275f85-aec2-4100-8f9e-b4e7abdca108
          methods:
          - summary: This is a summary of my API Method
            op: MyAPI-1.0:GET:/things
            descriptionType: original
            name: MyMethod
            descriptionUrl: https://myapi.org/docs/api#method
            descriptionMarkdown: ${environment.VINSTDIR}/../markdown/myapi/method.md
            id: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
            descriptionManual: This is _my_ API method
            apiMethodId: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
            virtualizedApiId: bacb827e-e555-43fa-b006-50c7404aa990
            apiId: ec5e0a01-832b-4ecb-8cae-b35630527bb4
            tags:
              Category:
              - Social Network, Photos
              Type:
              - REST
          - summary: This is a summary of my API Method
            op: MyAPI-1.0:GET:/things
            descriptionType: original
            name: MyMethod
            descriptionUrl: https://myapi.org/docs/api#method
            descriptionMarkdown: ${environment.VINSTDIR}/../markdown/myapi/method.md
            id: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
            descriptionManual: This is _my_ API method
            apiMethodId: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
            virtualizedApiId: bacb827e-e555-43fa-b006-50c7404aa990
            apiId: ec5e0a01-832b-4ecb-8cae-b35630527bb4
            tags:
              Category:
              - Social Network, Photos
              Type:
              - REST
          imagedata: {}
      properties:
        frontend:
          $ref: '#/components/schemas/FrontendExport'
        backend:
          $ref: '#/components/schemas/BackendExport'
        exportVersion:
          description: Export version
          format: int32
          type: integer
      type: object
    ReferencedEntity:
      description: Referenced entity.
      example:
        name: My Request Policy
        id: <key type='Example'>...</key>
      properties:
        name:
          description: Name of the referenced entity (as specified in Policy Studio
            configuration).
          example: My Request Policy
          type: string
        id:
          description: Portable version of the ESPK of this referenced entity, formatted
            as an XML fragment.
          example: <key type='Example'>...</key>
          type: string
      required:
      - id
      - name
      type: object
    VirtualizedMethodExport:
      description: Frontend API method export.
      example:
        summary: This is a summary of my API Method
        op: MyAPI-1.0:GET:/things
        descriptionType: original
        name: MyMethod
        descriptionUrl: https://myapi.org/docs/api#method
        descriptionMarkdown: ${environment.VINSTDIR}/../markdown/myapi/method.md
        id: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
        descriptionManual: This is _my_ API method
        apiMethodId: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
        virtualizedApiId: bacb827e-e555-43fa-b006-50c7404aa990
        apiId: ec5e0a01-832b-4ecb-8cae-b35630527bb4
        tags:
          Category:
          - Social Network, Photos
          Type:
          - REST
      properties:
        id:
          description: Unique ID of the method.
          example: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
          type: string
        virtualizedApiId:
          description: The identifier of the [VirtualizedAPI](VirtualizedAPI.html).
          example: bacb827e-e555-43fa-b006-50c7404aa990
          type: string
        name:
          description: The virtualized method name.  This defaults to the original
            [APIDefinition](APIDefinition.html) method name.
          example: MyMethod
          type: string
        apiId:
          description: The reference identifier for the original [APIDefinition](APIDefinition.html)
            that was virtualized.
          example: ec5e0a01-832b-4ecb-8cae-b35630527bb4
          type: string
        apiMethodId:
          description: The reference identifier for the original API [APIDefinition](APIDefinition.html)
            method that was virtualized.
          example: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
          type: string
        summary:
          description: A summary of the API Method.
          example: This is a summary of my API Method
          type: string
        descriptionType:
          description: 'The source for the method''s description.  One of: *original*,
            *manual*, *markdown*, or *url*.  Defaults to *original*.'
          example: original
          type: string
        descriptionManual:
          description: Specifies a manual description, which can be markdown text.
          example: This is _my_ API method
          type: string
        descriptionMarkdown:
          description: specifies a markdown file to use for description.
          example: ${environment.VINSTDIR}/../markdown/myapi/method.md
          type: string
        descriptionUrl:
          description: Specifies a URL to use instead of description text.
          example: https://myapi.org/docs/api#method
          type: string
        tags:
          additionalProperties:
            items:
              type: string
            type: array
          description: The list of tags associated with this API method. Each tag
            can have multiple values.
          example:
            Category:
            - Social Network, Photos
            Type:
            - REST
          type: object
        op:
          description: Internal use only.
          example: MyAPI-1.0:GET:/things
          type: string
      type: object
    CACert:
      description: Trusted CA certificate
      example:
        notValidBefore: 1364287486876
        inbound: false
        subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
        version: 3
        md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
        issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        signatureAlgorithm: RSA (2048 bits)
        expired: true
        certBlob: YmxvYg==
        outbound: true
        notValidAfter: 1364287486876
        name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
        notYetValid: false
      properties:
        certBlob:
          description: Raw certificate data
          example: YmxvYg==
          type: string
        name:
          description: Name of the certificate
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          type: string
        alias:
          description: Certificate alias
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          type: string
        subject:
          description: Certificate subject
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          type: string
        issuer:
          description: Certificate issuer
          example: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          type: string
        version:
          description: Version of the certificate
          example: 3
          format: int32
          type: integer
        notValidBefore:
          description: Start date of the certificate
          example: 1364287486876
          format: int64
          type: integer
        notValidAfter:
          description: Expiry date of the certificate
          example: 1364287486876
          format: int64
          type: integer
        signatureAlgorithm:
          description: The algorithm used to sign the certificate.
          example: RSA (2048 bits)
          type: string
        sha1Fingerprint:
          description: SHA1 fingerprint.
          example: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
          type: string
        md5Fingerprint:
          description: MD5 fingerprint.
          example: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
          type: string
        expired:
          default: false
          description: Flag indicating whether or not the certificate is expired.
          example: true
          type: boolean
        notYetValid:
          default: false
          description: Flag indicating whether or not the certificate is valid yet.
          example: false
          type: boolean
        inbound:
          default: false
          description: Flag indicating whether this certificate is used for inbound
            SSL connections when invoking the virtualized API.
          example: false
          type: boolean
        outbound:
          default: false
          description: Flag indicating whether this certificate is used for outbound
            SSL connections when invoking the virtualized API.
          example: true
          type: boolean
      type: object
    Topology:
      example:
        productVersion: productVersion
        hosts:
        - name: name
          id: id
        - name: name
          id: id
        uniqueIdCounters:
          key: 5
        emtEnabled: false
        groups:
        - name: name
          lock:
            locker: locker
            timestamp: 5
          id: id
          services:
          - scheme: scheme
            managementPort: 1
            name: name
            hostID: hostID
            id: id
            type: gateway
            enabled: false
            tags:
              key: tags
          - scheme: scheme
            managementPort: 1
            name: name
            hostID: hostID
            id: id
            type: gateway
            enabled: false
            tags:
              key: tags
          tags:
            key: tags
        - name: name
          lock:
            locker: locker
            timestamp: 5
          id: id
          services:
          - scheme: scheme
            managementPort: 1
            name: name
            hostID: hostID
            id: id
            type: gateway
            enabled: false
            tags:
              key: tags
          - scheme: scheme
            managementPort: 1
            name: name
            hostID: hostID
            id: id
            type: gateway
            enabled: false
            tags:
              key: tags
          tags:
            key: tags
        id: id
        services:
        - scheme: scheme
          managementPort: 1
          name: name
          hostID: hostID
          id: id
          type: gateway
          enabled: false
          tags:
            key: tags
        - scheme: scheme
          managementPort: 1
          name: name
          hostID: hostID
          id: id
          type: gateway
          enabled: false
          tags:
            key: tags
        version: 0
        timestamp: 6
      properties:
        id:
          type: string
        version:
          format: int32
          type: integer
        timestamp:
          format: int64
          type: integer
        productVersion:
          type: string
        hosts:
          items:
            $ref: '#/components/schemas/Host'
          type: array
        groups:
          items:
            $ref: '#/components/schemas/Group'
          type: array
        uniqueIdCounters:
          additionalProperties:
            format: int32
            type: integer
          type: object
        emtEnabled:
          default: false
          type: boolean
        services:
          items:
            $ref: '#/components/schemas/Service'
          type: array
      type: object
    Method:
      description: A method available on an API resource.
      example:
        summary: Gets a user by ID
        responseCodes:
        - schema:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          code: 404
          message: Not Found
        - schema:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          code: 404
          message: Not Found
        verb: GET
        description: If the user does not exist, then a *404 Not Found* error is returned
        path: /users
        name: getUserById
        produces: application/json
        id: 014d138b-816c-42b8-8a2a-5b63e72ea46d
        parameters:
        - schema:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          paramType: body
          allowMultiple: false
          defaultValue: text
          name: userId
          format: string
          description: description
          type: string
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          required: true
        - schema:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          paramType: body
          allowMultiple: false
          defaultValue: text
          name: userId
          format: string
          description: description
          type: string
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          required: true
        apiId: 6d81f576-bf40-4fbd-8625-63d8f206f649
        returnType: User
        properties:
          soapOperation: calculator
          soapNamespace: ""
        consumes: application/json
      properties:
        id:
          description: The method identifier
          example: 014d138b-816c-42b8-8a2a-5b63e72ea46d
          type: string
        apiId:
          description: The API identifier to which this method belongs
          example: 6d81f576-bf40-4fbd-8625-63d8f206f649
          type: string
        path:
          description: The API path
          example: /users
          type: string
        verb:
          description: The HTTP verb
          example: GET
          type: string
        name:
          description: The name of the operation
          example: getUserById
          type: string
        summary:
          description: A short summary description of the operation
          example: Gets a user by ID
          type: string
        description:
          description: A detailed description of the operation
          example: If the user does not exist, then a *404 Not Found* error is returned
          type: string
        returnType:
          description: The return type of the method, e.g. void, array, or a type
            found in models
          example: User
          type: string
        parameters:
          description: A list of accepted parameters
          items:
            $ref: '#/components/schemas/Parameter'
          type: array
        responseCodes:
          description: A list of possible response messages and their meanings
          items:
            $ref: '#/components/schemas/ResponseCode'
          type: array
        consumes:
          description: The content types that the operation consumes
          example: application/json
          items:
            type: string
          type: array
        produces:
          description: The content types that the operation produces
          example: application/json
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            type: string
          description: A list of properties associated with this API Method. The list
            of properties may vary, depending on the type of the parent API.
          example:
            soapOperation: calculator
            soapNamespace: ""
          type: object
      type: object
    ServiceProfiles:
      description: Service profile configuration for backend services
      properties:
        apiId:
          description: The backend service API identifier
          example: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
          type: string
        basePath:
          description: The backend service base path URL
          example: http://backend.io
          type: string
      type: object
    SwaggerSecurityDevice:
      description: Security Device details.
      properties:
        type:
          description: 'Type identifier for the device. Possible Values: HTTPBasicSecurityDevice,
            OAuthSecurityDevice, AWSRESTRequestSecurityDevice, AWSQueryStringRequestSecurityDevice,
            APIKeyOnlySecurityDevice, APIKeyAndSecretSecurityDevice, TwoWaySSLSecurityDevice'
          example: HTTPBasicSecurityDevice
          type: string
        typeDisplayName:
          description: Textual display name for the device
          example: HTTP Basic Authentication
          type: string
        name:
          description: Name of the device
          example: HTTP Basic Device
          type: string
        order:
          description: Order of preference, zero being highest. Devices will attempt
            to authenticate the incoming request using this order of preference.
          format: int32
          type: integer
        scopes:
          description: The list of scopes defined for the security device.
          example: resource.READ
          items:
            type: string
          type: array
        scopeMatching:
          description: 'Specifies how scopes will be matched. Possible values: [ Any,
            All ]'
          example: Any
          type: string
      type: object
    BackendExport:
      description: Backend API export definition.
      example:
        apiBlobs:
        - blob: YmxvYg==
          name: My API
          id: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
          importURL: My API
          type: swagger11
        - blob: YmxvYg==
          name: My API
          id: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
          importURL: My API
          type: swagger11
      properties:
        apiBlobs:
          description: List of backend API blobs
          items:
            $ref: '#/components/schemas/BackendBlob'
          type: array
      type: object
    PermissionDTO:
      description: API Manager application permission.
      example:
        createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
        permission: manage
        id: 46a6e874-a341-4c2d-870e-55e4c6ec27dc
        userId: 46a6e874-a341-4c2d-870e-55e4c6ec27dc
        createdOn: 1364407145121
      properties:
        id:
          description: The permission identifier
          example: 46a6e874-a341-4c2d-870e-55e4c6ec27dc
          readOnly: true
          type: string
        userId:
          description: The user identifier
          example: 46a6e874-a341-4c2d-870e-55e4c6ec27dc
          type: string
        permission:
          description: The privilege
          example: manage
          type: string
        createdBy:
          description: The unique identifier for user that create the permission
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
          readOnly: true
          type: string
        createdOn:
          description: Epoch/Unix time stamp when the permission was created
          example: 1364407145121
          format: int64
          readOnly: true
          type: integer
      type: object
    APIDefinition:
      description: An API definition.
      example:
        summary: This is a summary of my API
        serviceType: wsdl
        models:
          User:
            type: object
            required:
            - id
            - name
            - email
            properties:
              id:
                type: string
              name:
                type: string
              email:
                type: string
        resourcePath: /api
        description: This is my API
        version: "1.0"
        createdOn: 1364287486876
        organizationId: 7d82323230-4fbd-8625-63d8f206f649
        hasOriginalDefinition: true
        basePath: http://basepath.org
        createdBy: a1c70859-702b-4f3a-a1ad-a61067fdc4c7
        integral: true
        name: My API
        produces:
        - application/json
        id: 6d81f576-bf40-4fbd-8625-63d8f206f649
        importUrl: http://petstore.swagger.io/v1/swagger.json
        properties:
          ServiceName: Calculator
          Type: WSDL
        consumes:
        - application/json
      properties:
        id:
          description: A unique identifier.
          example: 6d81f576-bf40-4fbd-8625-63d8f206f649
          type: string
        name:
          description: The name of the API.
          example: My API
          type: string
        summary:
          description: A summary of the API.
          example: This is a summary of my API
          type: string
        description:
          description: A detailed description of the API.
          example: This is my API
          type: string
        version:
          description: The API version.
          example: "1.0"
          type: string
        basePath:
          description: The base path is where the API service is hosted.
          example: http://basepath.org
          type: string
        resourcePath:
          description: The resource path is applied to **basePath** to provide the
            prefix for all API methods.
          example: /api
          type: string
        models:
          additionalProperties:
            properties: {}
            type: object
          description: The models/schema the that the API
          example:
            User:
              type: object
              required:
              - id
              - name
              - email
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
          type: object
        consumes:
          description: The content types that the API consumes
          example:
          - application/json
          items:
            type: string
          type: array
        produces:
          description: The content types that the API produces
          example:
          - application/json
          items:
            type: string
          type: array
        integral:
          default: false
          description: Indicates that the API definition is integral to a frontend
            API; that the API was imported to define the frontend API.
          example: true
          type: boolean
        createdOn:
          description: Epoch/Unix time stamp when the organization was created.
          example: 1364287486876
          format: int64
          type: integer
        createdBy:
          description: The identifier of the user that created the API.
          example: a1c70859-702b-4f3a-a1ad-a61067fdc4c7
          type: string
        organizationId:
          description: The [Organization](Organization.html) identifier.
          example: 7d82323230-4fbd-8625-63d8f206f649
          type: string
        serviceType:
          description: 'Indicates the type of service being imported. Possible values:
            rest, wsdl.'
          example: wsdl
          type: string
        hasOriginalDefinition:
          default: false
          description: Indicates whether or not an original definition is available
          example: true
          type: boolean
        importUrl:
          description: Specifies the URL used to import the backend API definition.
          example: http://petstore.swagger.io/v1/swagger.json
          type: string
        properties:
          additionalProperties:
            type: string
          description: A list of properties associated with this API.
          example:
            ServiceName: Calculator
            Type: WSDL
          type: object
      type: object
    BackendBlob:
      description: Backend blob export definition.
      example:
        blob: YmxvYg==
        name: My API
        id: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
        importURL: My API
        type: swagger11
      properties:
        id:
          description: Unique identifier
          example: 588c51d8-5b6f-4c2f-b0e8-3eeaf25d1458
          type: string
        type:
          description: Type of blob
          example: swagger11
          type: string
        blob:
          description: Base64 encoded API
          example: YmxvYg==
          type: string
        name:
          description: API name
          example: My API
          type: string
        importURL:
          description: Original URL
          example: My API
          type: string
      type: object
    AuthenticationProfile:
      description: Outbound authentication profile.
      example:
        isDefault: false
        name: Default Security Profile
        type: apikey
        parameters:
          apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
          apiKeyField: KeyId
          httpLocation: query
      properties:
        name:
          description: Unique name of the Profile
          example: Default Security Profile
          type: string
        isDefault:
          default: false
          description: Indicates that this is the default profile.  There can be only
            one default.
          example: false
          type: boolean
        parameters:
          additionalProperties:
            properties: {}
            type: object
          description: Parameters for the backend authentication profile
          example:
            apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
            apiKeyField: KeyId
            httpLocation: query
          type: object
        type:
          description: 'Type of backend authentication. Possible values: *none*, *http_basic*,
            *http_digest*, *apiKey*, *oauth*, and *ssl*.'
          example: apikey
          type: string
      type: object
    GrantTypes:
      example:
        implicit:
          loginEndpoint:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            url: http://myapi.io/oauth/dialog
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          format: format
          tokenName: access_token
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        authorization_code:
          tokenRequestEndpoint:
            clientSecretName: "."
            format: format
            clientIdName: "."
            description: description
            title: title
            type: string
            required:
            - required
            - required
            url: "."
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          tokenEndpoint:
            format: format
            tokenName: access_code
            description: description
            title: title
            type: string
            required:
            - required
            - required
            url: http://myapi.io/oauth/token
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        implicit:
          $ref: '#/components/schemas/Implicit'
        authorization_code:
          $ref: '#/components/schemas/AuthorizationCode'
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    Application:
      description: API Manager application.
      example:
        organizationId: 3e21b76a-defa-49ab-9682-a9cd60387e37
        image: resources/photo.jpg
        phone: +1 877-564-7700
        createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
        managedBy:
        - de077cd8-83b7-46d1-b06f-2eaaf1548898
        name: My First iPhone App
        description: My First iPhone App which is a "Hello World" basic application
        id: b76a3e23-deca-49ab-9682-79cd503b7e3a
        state: approved
        createdOn: 1364407145121
        email: support@acmecorp.com
        enabled: false
      properties:
        id:
          description: The unique identifier for the application
          example: b76a3e23-deca-49ab-9682-79cd503b7e3a
          readOnly: true
          type: string
        name:
          description: The display name for the application
          example: My First iPhone App
          type: string
        description:
          description: Descriptive text for the application
          example: My First iPhone App which is a "Hello World" basic application
          type: string
        organizationId:
          description: The organization identifier to which the application belongs
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          type: string
        phone:
          description: Contact phone number of the application
          example: +1 877-564-7700
          type: string
        email:
          description: The contact email address associated with the application
          example: support@acmecorp.com
          type: string
        createdBy:
          description: The unique identifier for user that created the application
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
          readOnly: true
          type: string
        managedBy:
          description: A list of unique identifier for users that manages the application
          example:
          - de077cd8-83b7-46d1-b06f-2eaaf1548898
          items:
            type: string
          type: array
        createdOn:
          description: Epoch/Unix time stamp when the application was created
          example: 1364407145121
          format: int64
          readOnly: true
          type: integer
        enabled:
          default: false
          description: Flag to indicate if this application is enabled or not
          example: false
          type: boolean
        image:
          description: URI of the image to be used for this application, this field
            only indicates that the application has an image assigned to it. In order
            to retrieve the actual image use the following URL /api/portal/applications/{id}/image/
          example: resources/photo.jpg
          type: string
        state:
          description: Flag to indicate if an application has been approved by the
            API Manager admin or if delegated then the org admin
          example: approved
          type: string
      required:
      - name
      - organizationId
      type: object
    Group:
      example:
        name: name
        lock:
          locker: locker
          timestamp: 5
        id: id
        services:
        - scheme: scheme
          managementPort: 1
          name: name
          hostID: hostID
          id: id
          type: gateway
          enabled: false
          tags:
            key: tags
        - scheme: scheme
          managementPort: 1
          name: name
          hostID: hostID
          id: id
          type: gateway
          enabled: false
          tags:
            key: tags
        tags:
          key: tags
      properties:
        id:
          type: string
        name:
          type: string
        tags:
          additionalProperties:
            type: string
          type: object
        services:
          items:
            $ref: '#/components/schemas/Service'
          type: array
        lock:
          $ref: '#/components/schemas/Lock'
      type: object
    SystemConfig:
      description: API Manager system configuration
      example:
        disabledApis:
        - c1c63d3b-5283-4755-ade7-e2377bd35049
      properties:
        disabledApis:
          description: Returns a list of disabled APIs
          example:
          - c1c63d3b-5283-4755-ade7-e2377bd35049
          items:
            type: string
          type: array
      type: object
    Organization:
      description: API Manager organization
      example:
        image: resources/photo.jpg
        development: false
        endTrialDate: 1364287486876
        description: Acme Corporation is a fictional corporation in Road Runner/Wile
          E. Coyote cartoons
        dn: dn
        virtualHost: acme.api.axway.com
        isTrial: true
        createdOn: 1364287486876
        enabled: false
        startTrialDate: 1364287486876
        trialDuration: 365
        phone: +1 877-564-7700
        restricted: false
        name: Acme Corporation
        id: 3e21b76a-defa-49ab-9682-a9cd60387e37
        email: support@acmecorp.com
      properties:
        id:
          description: The unique identifier for the organization
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        name:
          description: The name of the organization
          example: Acme Corporation
          type: string
        description:
          description: The description of the organization
          example: Acme Corporation is a fictional corporation in Road Runner/Wile
            E. Coyote cartoons
          type: string
        email:
          description: The contact email address associated with the organization
          example: support@acmecorp.com
          type: string
        image:
          description: URI of the image to be used for this organization. To update
            the image, please refer to the API.
          example: resources/photo.jpg
          type: string
        restricted:
          default: false
          description: Indicates that the organization is restricted.  Users in a
            restricted organization cannot see other users, and users cannot register
            for the organization using tokens.  Default is 'false'.
          example: false
          type: boolean
        virtualHost:
          description: The virtual host associated with the organization
          example: acme.api.axway.com
          type: string
        phone:
          description: Contact phone number of the organization
          example: +1 877-564-7700
          type: string
        enabled:
          default: false
          description: Flag to indicate if this organization is enabled or not
          example: false
          type: boolean
        development:
          default: false
          description: Flag to indicate if this organization is enabled or not for
            API development.
          example: false
          type: boolean
        dn:
          type: string
        createdOn:
          description: Epoch/Unix time stamp when the organization was created
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        startTrialDate:
          description: Epoch/Unix time stamp when the trial starts
          example: 1364287486876
          format: int64
          type: integer
        endTrialDate:
          description: Epoch/Unix time stamp when the trial expires
          example: 1364287486876
          format: int64
          type: integer
        trialDuration:
          description: Length of the trial in days
          example: 365
          format: int32
          type: integer
        isTrial:
          default: false
          description: Indicates if this Org is a trial or not
          example: true
          type: boolean
      required:
      - name
      type: object
    User:
      description: The API Manager user is a member of organizations.
      example:
        image: resources/photo.jpg
        role: user
        mobile: +353 (89) 6742087
        description: Created by admin
        dn: dn
        type: internal
        createdOn: 1367337125476
        enabled: true
        organizationId: 6fb4bd38-199a-4e9f-8c11-43233f530d82
        phone: +353 (1) 6742000
        authAttrs:
          isSSOLogin: false
          firstLogin: false
          userDn: userDn
        loginName: jbloggs
        name: New User
        id: 2be9fc6e-1110-474f-8029-bf1577ec3801
        state: approved
        email: jbloggs@acmecorp.com
      properties:
        id:
          description: The unique identifier for the user
          example: 2be9fc6e-1110-474f-8029-bf1577ec3801
          type: string
        organizationId:
          description: The unique identifier for the organization to which the user
            belongs
          example: 6fb4bd38-199a-4e9f-8c11-43233f530d82
          type: string
        name:
          description: The user's name
          example: New User
          type: string
        description:
          description: A description of the user
          example: Created by admin
          type: string
        loginName:
          description: A unique login name for the user
          example: jbloggs
          type: string
        email:
          description: An email address for the user
          example: jbloggs@acmecorp.com
          type: string
        phone:
          description: The user's phone number
          example: +353 (1) 6742000
          type: string
        mobile:
          description: The user's mobile number
          example: +353 (89) 6742087
          type: string
        role:
          description: 'The user''s role, one of: user, oadmin, or admin'
          example: user
          type: string
        image:
          description: The user's photo. To update the image, please refer to the
            API.
          example: resources/photo.jpg
          type: string
        enabled:
          default: false
          description: Indicates whether or not the user account is enabled or not
          example: true
          type: boolean
        createdOn:
          description: Epoch/Unix time stamp when the organization was created
          example: 1367337125476
          format: int64
          type: integer
        state:
          description: 'The current state of the account, one of: approved, pending'
          example: approved
          type: string
        type:
          description: 'Indicates the type of user. Possible values: internal, external'
          example: internal
          type: string
        authAttrs:
          $ref: '#/components/schemas/AuthenticatedUserAttributes'
        dn:
          type: string
      type: object
    OAuthClient:
      description: API Manager OAuth Credentials.
      example:
        createdBy: 3e21b76a-defa-49ab-9682-a9cd60387e37
        corsOrigins: '[example.com]'
        cert: '-----BEGIN CERTIFICATE-----MIICUTC..............-----END CERTIFICATE-----'
        id: 7b32f6c9-9e27-4def-87e2-247aadf7f583
        secret: ddf27559-ace0-4c4f-b5e4-ecf2086fddc5
        type: public
        applicationId: applicationId
        createdOn: 1364287486876
        enabled: true
        redirectUrls: '[https://example.com/callback]'
      properties:
        id:
          description: The client ID to be used in OAuth flows
          example: 7b32f6c9-9e27-4def-87e2-247aadf7f583
          type: string
        cert:
          description: The PEM encodeded certificate used in JWT flow
          example: '-----BEGIN CERTIFICATE-----MIICUTC..............-----END CERTIFICATE-----'
          type: string
        secret:
          description: The client application secret to be used in OAuth flows
          example: ddf27559-ace0-4c4f-b5e4-ecf2086fddc5
          type: string
        type:
          description: OAuth defines two client types, based on their ability to authenticate
            securely with the authorization server. Possible values public or confidential
          example: public
          type: string
        enabled:
          default: false
          description: Flag disables the OAuth credentials so they can't be used in
            authentication
          example: true
          type: boolean
        redirectUrls:
          description: The URL where the server will redirect the to present authorization
            codes or access tokens depending on the OAuth flow being executed
          example: '[https://example.com/callback]'
          items:
            type: string
          type: array
        corsOrigins:
          description: The domains to allow access for browser-based clients
          example: '[example.com]'
          items:
            type: string
          type: array
        createdBy:
          description: The unique identifier for user that generated the OAuth credentials
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        createdOn:
          description: Epoch/Unix time stamp when the OAuth credentials was created
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        applicationId:
          description: The application identifier associated with the OAuth credential
          type: string
      type: object
    Config:
      description: API Manager configuration
      example:
        registrationEnabled: true
        resetPasswordEnabled: true
        isTrial: false
        promoteApiViaPolicy: true
        apiPortalHostname: apiportal.axway.com
        systemOAuthScopesEnabled: false
        apiPortalName: Axway API Portal
        faultHandlersEnabled: true
        productVersion: 7.6.2
        portalName: Axway API Manager
        globalResponsePolicy: Corporate Response Policy
        autoApproveApplications: true
        globalRequestPolicy: Corporate Security Policy
        externalUserEnabled: ${userinfo.enabled}
        autoApproveUserRegistration: true
        externalUserEmail: ${userinfo.email}
        delegateApplicationAdministration: true
        apiDefaultVirtualHost: apimanager.axway.com:443
        apiRoutingKeyLocation: query|param
        architecture: win-x86-32
        externalUserPhone: ${userinfo.phone}
        globalPoliciesEnabled: true
        externalUserDescription: ${userinfo.description}
        minimumPasswordLength: 6
        os: Windows 7
        baseOAuth: false
        emailBounceAddress: apiadmin@axway.com
        externalUserOrganization: ${userinfo.organization}
        loginNameRegex: '[^;,\/?#<>&!]{1,}'
        defaultTrialDuration: 30
        externalUserRole: ${userinfo.role}
        globalFaultHandlerPolicy: Corporate Fault Handler Policy
        isApiPortalConfigured: true
        sessionIdleTimeout: 360000
        delegateUserAdministration: true
        emailFrom: no-reply@axway.com
        portalHostname: apimanager.axway.com
        apiRoutingKeyEnabled: false
        externalUserName: ${userinfo.name}
      properties:
        portalName:
          description: The name of the API Manager.
          example: Axway API Manager
          type: string
        portalHostname:
          description: The network hostname or IP Address of the API Manager which
            will be used in email links.
          example: apimanager.axway.com
          type: string
        apiPortalName:
          description: The name of the API Portal
          example: Axway API Portal
          type: string
        apiPortalHostname:
          description: The network hostname or IP Address of the API Portal which
            will be used in email links.
          example: apiportal.axway.com
          type: string
        isApiPortalConfigured:
          default: false
          description: Indicates if the API Portal is configured.
          example: true
          type: boolean
        registrationEnabled:
          default: false
          description: Enables/disables user registration for the API Manager
          example: true
          type: boolean
        resetPasswordEnabled:
          default: false
          description: Enables/disables spport for resetting user passwords for the
            API Manager
          example: true
          type: boolean
        minimumPasswordLength:
          description: The minimum password length.
          example: 6
          format: int32
          type: integer
        autoApproveUserRegistration:
          default: false
          description: Enables/disables auto-approve for user registration whereby
            API Administrator or Organization Administrator approval is not required.
          example: true
          type: boolean
        systemOAuthScopesEnabled:
          default: false
          description: Enables/disables the ability to add System scopes to an Application.
            These scopes represent Gateway OAuth resources that are not covered by
            APIs.
          example: false
          type: boolean
        autoApproveApplications:
          default: false
          description: Enables/disables auto-application approval whereby users do
            not need API Administrator or Organization Administrator approval.
          example: true
          type: boolean
        delegateUserAdministration:
          default: false
          description: Enables/disables user administration to the Organization Administrators.
          example: true
          type: boolean
        delegateApplicationAdministration:
          default: false
          description: Enables/disables application administration to the Organization
            Administrators.
          example: true
          type: boolean
        apiDefaultVirtualHost:
          description: The network host and port that serves as the default virtual
            host from which API Manager registered API will be accessible through.
          example: apimanager.axway.com:443
          type: string
        apiRoutingKeyEnabled:
          default: false
          description: Enable routing to APIs on the same base path.
          type: boolean
        apiRoutingKeyLocation:
          description: An additional routing key is required to support multiple APIs
            registered on the same base path. This indicates where to look for the
            value.
          example: query|param
          type: string
        emailFrom:
          description: The 'from' address used in emails.
          example: no-reply@axway.com
          type: string
        emailBounceAddress:
          description: An email address where undeliverable emails will be bounced
            to.
          example: apiadmin@axway.com
          type: string
        promoteApiViaPolicy:
          default: false
          description: Enables/disables API promotion via policy.
          example: true
          type: boolean
        globalPoliciesEnabled:
          default: false
          description: Enables/disables Global policies.
          example: true
          type: boolean
        globalRequestPolicy:
          description: The Global Request Policy to be executed for all Frontend API
            calls. Must be a valid policy ID. Can be null to indicate no policy
          example: Corporate Security Policy
          type: string
        globalResponsePolicy:
          description: The Global Response Policy to be executed for all Frontend
            API calls. Must be a valid policy ID. Can be null to indicate no policy
          example: Corporate Response Policy
          type: string
        faultHandlersEnabled:
          default: false
          description: Enables/disables API Manager fault handlers.
          example: true
          type: boolean
        globalFaultHandlerPolicy:
          description: The Global Fault Handler Policy to be used by all Frontend
            APIs in the event of an error. Must be a valid policy ID. Can be null
            to indicate no policy
          example: Corporate Fault Handler Policy
          type: string
        baseOAuth:
          default: false
          type: boolean
        externalUserName:
          description: External user name
          example: ${userinfo.name}
          type: string
        externalUserDescription:
          description: External user description
          example: ${userinfo.description}
          type: string
        externalUserPhone:
          description: External user phone
          example: ${userinfo.phone}
          type: string
        externalUserEmail:
          description: External user email
          example: ${userinfo.email}
          type: string
        externalUserOrganization:
          description: External user organization name
          example: ${userinfo.organization}
          type: string
        externalUserRole:
          description: External user role
          example: ${userinfo.role}
          type: string
        externalUserEnabled:
          description: External user enabled
          example: ${userinfo.enabled}
          type: string
        sessionIdleTimeout:
          description: Idle session timeout in milliseconds
          example: 360000
          format: int64
          type: integer
        isTrial:
          default: false
          description: Is trial enabled
          example: false
          type: boolean
        defaultTrialDuration:
          description: Default trial duration in days
          example: 30
          format: int32
          type: integer
        loginNameRegex:
          description: Login name validation regex
          example: '[^;,\/?#<>&!]{1,}'
          type: string
        productVersion:
          description: The Version information of API Manager.
          example: 7.6.2
          type: string
        os:
          description: The operating system on which API Manager server is running.
          example: Windows 7
          type: string
        architecture:
          description: 'The architecture of the operating system on which the API
            Manager server is running. Supported values: [ win-x86-32, linux-x86-64
            ]'
          example: win-x86-32
          type: string
      required:
      - sessionIdleTimeout
      type: object
    ParamValue:
      description: Outbound parameter value.
      properties:
        name:
          description: The parameter name.
          example: id
          type: string
        paramType:
          description: 'The type of parameter type.  Can be one of: *body*, *query*,
            *path*, *form*, or *header*.'
          example: query
          type: string
        type:
          description: 'The parameter data type.  Can be one of: *string*, *integer*,
            etc.'
          example: string
          type: string
        value:
          description: 'The parameter value.  Can be a regular value, or a selector,
            e.g.: ${params.path.id}.'
          example: ${params.path.id}
          type: string
        required:
          default: false
          description: Indicates whether or not the parameter is required for the
            backend API.
          example: true
          type: boolean
        exclude:
          default: false
          description: Indicates whether or not the parameter is excluded for the
            backend API.
          example: false
          type: boolean
        additional:
          default: false
          description: Indicates whether or not the parameter is an additional parameter
            (does not replace an existing parameter).
          example: false
          type: boolean
      type: object
    FrontendExport:
      description: Frontend API export definition.
      example:
        apis:
        - deprecated: true
          createdOn: 1364287486876
          organizationId: b6889722b7-222-b06f-2eaaf1548898
          path: /flikr
          expired: false
          authenticationProfiles:
          - isDefault: false
            name: Default Security Profile
            type: apikey
            parameters:
              apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
              apiKeyField: KeyId
              httpLocation: query
          - isDefault: false
            name: Default Security Profile
            type: apikey
            parameters:
              apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
              apiKeyField: KeyId
              httpLocation: query
          descriptionType: manual
          outboundProfiles:
            _default:
              authenticationProfile: My Backend
              apiMethodId: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
              routeType: proxy
              apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
          retired: false
          id: bacb827e-e555-43fa-b006-50c7404aa990
          state: unpublished
          corsProfiles:
          - isDefault: false
            supportCredentials: false
            exposedHeaders:
            - X-Trace
            - X-CorrelationID
            name: Default Security Profile
            origins:
            - http://api.google.com
            - http://api.flickr.com
            allowedHeaders:
            - X-Request-Value
            - X-Hello-World
            maxAgeSeconds: 84600
          - isDefault: false
            supportCredentials: false
            exposedHeaders:
            - X-Trace
            - X-CorrelationID
            name: Default Security Profile
            origins:
            - http://api.google.com
            - http://api.flickr.com
            allowedHeaders:
            - X-Request-Value
            - X-Hello-World
            maxAgeSeconds: 84600
          apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
          summary: |-
            My API
            ====

            This is my API.
          image: resources/photo.jpg
          serviceProfiles:
            _default:
              basePath: http://backend.io
              apiId: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
          retirementDate: 1364287486876
          inboundProfiles:
            _default:
              monitorAPI: "true"
              securityProfile: Default Inbound Security
              corsProfile: Default CORS profile
              monitorSubject: authentication.subject.id
          version: "1.0"
          securityProfiles:
          - isDefault: false
            devices:
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            name: Default Security Profile
          - isDefault: false
            devices:
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            name: Default Security Profile
          tags:
            Category:
            - Social Network, Photos
            Type:
            - REST
          vhost: host.company.com
          createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
          apiRoutingKey: "1"
          name: My virtualized API
          descriptionUrl: http://doc.api.org/myapi/mymethod#anchor
          descriptionMarkdown: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
          descriptionManual: |-
            My API
            ====

            This is my API.
          caCerts:
          - notValidBefore: 1364287486876
            inbound: false
            subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
            version: 3
            md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
            issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            signatureAlgorithm: RSA (2048 bits)
            expired: true
            certBlob: YmxvYg==
            outbound: true
            notValidAfter: 1364287486876
            name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            notYetValid: false
          - notValidBefore: 1364287486876
            inbound: false
            subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
            version: 3
            md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
            issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            signatureAlgorithm: RSA (2048 bits)
            expired: true
            certBlob: YmxvYg==
            outbound: true
            notValidAfter: 1364287486876
            name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            notYetValid: false
        - deprecated: true
          createdOn: 1364287486876
          organizationId: b6889722b7-222-b06f-2eaaf1548898
          path: /flikr
          expired: false
          authenticationProfiles:
          - isDefault: false
            name: Default Security Profile
            type: apikey
            parameters:
              apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
              apiKeyField: KeyId
              httpLocation: query
          - isDefault: false
            name: Default Security Profile
            type: apikey
            parameters:
              apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
              apiKeyField: KeyId
              httpLocation: query
          descriptionType: manual
          outboundProfiles:
            _default:
              authenticationProfile: My Backend
              apiMethodId: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
              routeType: proxy
              apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
          retired: false
          id: bacb827e-e555-43fa-b006-50c7404aa990
          state: unpublished
          corsProfiles:
          - isDefault: false
            supportCredentials: false
            exposedHeaders:
            - X-Trace
            - X-CorrelationID
            name: Default Security Profile
            origins:
            - http://api.google.com
            - http://api.flickr.com
            allowedHeaders:
            - X-Request-Value
            - X-Hello-World
            maxAgeSeconds: 84600
          - isDefault: false
            supportCredentials: false
            exposedHeaders:
            - X-Trace
            - X-CorrelationID
            name: Default Security Profile
            origins:
            - http://api.google.com
            - http://api.flickr.com
            allowedHeaders:
            - X-Request-Value
            - X-Hello-World
            maxAgeSeconds: 84600
          apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
          summary: |-
            My API
            ====

            This is my API.
          image: resources/photo.jpg
          serviceProfiles:
            _default:
              basePath: http://backend.io
              apiId: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
          retirementDate: 1364287486876
          inboundProfiles:
            _default:
              monitorAPI: "true"
              securityProfile: Default Inbound Security
              corsProfile: Default CORS profile
              monitorSubject: authentication.subject.id
          version: "1.0"
          securityProfiles:
          - isDefault: false
            devices:
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            name: Default Security Profile
          - isDefault: false
            devices:
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            - name: My Pass-through Device
              type: apiKey
              properties:
                apiKeyFieldName: APIKey
                takeFrom: HEADER
              order: 1
            name: Default Security Profile
          tags:
            Category:
            - Social Network, Photos
            Type:
            - REST
          vhost: host.company.com
          createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
          apiRoutingKey: "1"
          name: My virtualized API
          descriptionUrl: http://doc.api.org/myapi/mymethod#anchor
          descriptionMarkdown: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
          descriptionManual: |-
            My API
            ====

            This is my API.
          caCerts:
          - notValidBefore: 1364287486876
            inbound: false
            subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
            version: 3
            md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
            issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            signatureAlgorithm: RSA (2048 bits)
            expired: true
            certBlob: YmxvYg==
            outbound: true
            notValidAfter: 1364287486876
            name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            notYetValid: false
          - notValidBefore: 1364287486876
            inbound: false
            subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
            version: 3
            md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
            issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            signatureAlgorithm: RSA (2048 bits)
            expired: true
            certBlob: YmxvYg==
            outbound: true
            notValidAfter: 1364287486876
            name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
            notYetValid: false
        backendMethods:
        - op: MyAPI-1.0:GET:/things
          apiMethodId: 19ec174e-b217-4c60-aa40-c22040569363
          apiId: 0a275f85-aec2-4100-8f9e-b4e7abdca108
        - op: MyAPI-1.0:GET:/things
          apiMethodId: 19ec174e-b217-4c60-aa40-c22040569363
          apiId: 0a275f85-aec2-4100-8f9e-b4e7abdca108
        methods:
        - summary: This is a summary of my API Method
          op: MyAPI-1.0:GET:/things
          descriptionType: original
          name: MyMethod
          descriptionUrl: https://myapi.org/docs/api#method
          descriptionMarkdown: ${environment.VINSTDIR}/../markdown/myapi/method.md
          id: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
          descriptionManual: This is _my_ API method
          apiMethodId: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
          virtualizedApiId: bacb827e-e555-43fa-b006-50c7404aa990
          apiId: ec5e0a01-832b-4ecb-8cae-b35630527bb4
          tags:
            Category:
            - Social Network, Photos
            Type:
            - REST
        - summary: This is a summary of my API Method
          op: MyAPI-1.0:GET:/things
          descriptionType: original
          name: MyMethod
          descriptionUrl: https://myapi.org/docs/api#method
          descriptionMarkdown: ${environment.VINSTDIR}/../markdown/myapi/method.md
          id: f2a0d13a-51f3-4256-855e-2b1d838a5cd2
          descriptionManual: This is _my_ API method
          apiMethodId: 21490aa6-ed14-4059-b8b7-d5bf0dc22dc6
          virtualizedApiId: bacb827e-e555-43fa-b006-50c7404aa990
          apiId: ec5e0a01-832b-4ecb-8cae-b35630527bb4
          tags:
            Category:
            - Social Network, Photos
            Type:
            - REST
        imagedata: {}
      properties:
        apis:
          description: List of frontend API
          items:
            $ref: '#/components/schemas/VirtualizedAPI'
          type: array
        methods:
          description: List of frontend API methods
          items:
            $ref: '#/components/schemas/VirtualizedMethodExport'
          type: array
        backendMethods:
          description: List of backend API methods
          items:
            $ref: '#/components/schemas/BackendMethodExport'
          type: array
        imagedata:
          additionalProperties:
            type: string
          description: Image Export
          example: {}
          type: object
      type: object
    Operation:
      description: An operation available to an API path.
      example:
        documentationUrl: http://api.acme.com/docs#method
        notes: If the user does not exist, then a *404 Not Found* error is returned
        cors: true
        authorizations: {}
        description: description
        title: title
        httpMethod: GET
        type: User
        required:
        - required
        - required
        example: '{}'
        default: '{}'
        responseClass: User
        securityProfile:
          devices:
          - type: APIKeyOnlySecurityDevice
            typeDisplayName: API Key only
            name: API Key Device
            order: 1
            keyField: KeyId
          - type: HTTPBasicSecurityDevice
            typeDisplayName: HTTP Basic Authentication
            name: HTTP Basic Device
            order: 0
            realm: axway
        nickname: getUserById
        errorResponses:
        - reason: Not Found
          code: 404
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        - reason: Not Found
          code: 404
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        id: id
        consumes:
        - application/json
        summary: Gets a user by ID
        format: format
        enum:
        - enum
        - enum
        discriminator: discriminator
        tags:
          Category:
          - Social Network
          - Photos
          Type:
          - REST
          Department:
          - Development
        produces:
        - application/json
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        parameters:
        - schema:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          paramType: body
          allowMultiple: false
          defaultValue: text
          name: userId
          format: string
          description: description
          type: string
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          required: true
        - schema:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          paramType: body
          allowMultiple: false
          defaultValue: text
          name: userId
          format: string
          description: description
          type: string
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          required: true
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        httpMethod:
          description: The HTTP method
          example: GET
          type: string
        nickname:
          description: The nickname of the operation
          example: getUserById
          type: string
        summary:
          description: A short summary description of the operation
          example: Gets a user by ID
          type: string
        notes:
          description: A detailed description of the operation
          example: If the user does not exist, then a *404 Not Found* error is returned
          type: string
        responseClass:
          description: The return type of the method, e.g. void, array, or a type
            found in models
          example: User
          type: string
        errorResponses:
          description: A list of possible response messages and their meanings
          items:
            $ref: '#/components/schemas/ErrorResponse'
          type: array
        consumes:
          description: The content types that the operation consumes
          example:
          - application/json
          items:
            type: string
          type: array
        produces:
          description: The content types that the operation produces
          example:
          - application/json
          items:
            type: string
          type: array
        authorizations:
          additionalProperties:
            items:
              properties: {}
              type: object
            type: array
          description: Authorizations
          example: {}
          type: object
        tags:
          additionalProperties:
            items:
              type: string
            type: array
          description: The list of tags associated with this API operation. Each tag
            can have multiple values
          example:
            Category:
            - Social Network
            - Photos
            Type:
            - REST
            Department:
            - Development
          type: object
        securityProfile:
          $ref: '#/components/schemas/SwaggerSecurityProfile'
        documentationUrl:
          description: The documentation URL for the operation
          example: http://api.acme.com/docs#method
          type: string
        cors:
          default: false
          description: Indicates that the API is CORS enabled
          example: true
          type: boolean
        parameters:
          description: A list of accepted parameters
          items:
            $ref: '#/components/schemas/Parameter'
          type: array
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: The return type of the method, e.g. void, array, or a type
            found in models
          example: User
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    VirtualizedAPI:
      description: Represents a virtualized, frontend API.
      example:
        deprecated: true
        createdOn: 1364287486876
        organizationId: b6889722b7-222-b06f-2eaaf1548898
        path: /flikr
        expired: false
        authenticationProfiles:
        - isDefault: false
          name: Default Security Profile
          type: apikey
          parameters:
            apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
            apiKeyField: KeyId
            httpLocation: query
        - isDefault: false
          name: Default Security Profile
          type: apikey
          parameters:
            apiKey: e7812c14-b67a-4eef-84a1-e18c0d8436ba
            apiKeyField: KeyId
            httpLocation: query
        descriptionType: manual
        outboundProfiles:
          _default:
            authenticationProfile: My Backend
            apiMethodId: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
            routeType: proxy
            apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
        retired: false
        id: bacb827e-e555-43fa-b006-50c7404aa990
        state: unpublished
        corsProfiles:
        - isDefault: false
          supportCredentials: false
          exposedHeaders:
          - X-Trace
          - X-CorrelationID
          name: Default Security Profile
          origins:
          - http://api.google.com
          - http://api.flickr.com
          allowedHeaders:
          - X-Request-Value
          - X-Hello-World
          maxAgeSeconds: 84600
        - isDefault: false
          supportCredentials: false
          exposedHeaders:
          - X-Trace
          - X-CorrelationID
          name: Default Security Profile
          origins:
          - http://api.google.com
          - http://api.flickr.com
          allowedHeaders:
          - X-Request-Value
          - X-Hello-World
          maxAgeSeconds: 84600
        apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
        summary: |-
          My API
          ====

          This is my API.
        image: resources/photo.jpg
        serviceProfiles:
          _default:
            basePath: http://backend.io
            apiId: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
        retirementDate: 1364287486876
        inboundProfiles:
          _default:
            monitorAPI: "true"
            securityProfile: Default Inbound Security
            corsProfile: Default CORS profile
            monitorSubject: authentication.subject.id
        version: "1.0"
        securityProfiles:
        - isDefault: false
          devices:
          - name: My Pass-through Device
            type: apiKey
            properties:
              apiKeyFieldName: APIKey
              takeFrom: HEADER
            order: 1
          - name: My Pass-through Device
            type: apiKey
            properties:
              apiKeyFieldName: APIKey
              takeFrom: HEADER
            order: 1
          name: Default Security Profile
        - isDefault: false
          devices:
          - name: My Pass-through Device
            type: apiKey
            properties:
              apiKeyFieldName: APIKey
              takeFrom: HEADER
            order: 1
          - name: My Pass-through Device
            type: apiKey
            properties:
              apiKeyFieldName: APIKey
              takeFrom: HEADER
            order: 1
          name: Default Security Profile
        tags:
          Category:
          - Social Network, Photos
          Type:
          - REST
        vhost: host.company.com
        createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
        apiRoutingKey: "1"
        name: My virtualized API
        descriptionUrl: http://doc.api.org/myapi/mymethod#anchor
        descriptionMarkdown: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
        descriptionManual: |-
          My API
          ====

          This is my API.
        caCerts:
        - notValidBefore: 1364287486876
          inbound: false
          subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
          version: 3
          md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
          issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          signatureAlgorithm: RSA (2048 bits)
          expired: true
          certBlob: YmxvYg==
          outbound: true
          notValidAfter: 1364287486876
          name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          notYetValid: false
        - notValidBefore: 1364287486876
          inbound: false
          subject: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          sha1Fingerprint: BC:5C:0D:3E:47:58:DF:E8:42:A4:D2:34:C5:D4:97:14:DA:54:F4:CD
          version: 3
          md5Fingerprint: 89:DD:C1:6C:C0:6E:1D:B1:75:0C:48:E5:E6:AC:76:B0
          issuer: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          signatureAlgorithm: RSA (2048 bits)
          expired: true
          certBlob: YmxvYg==
          outbound: true
          notValidAfter: 1364287486876
          name: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          alias: CN=Equifax Secure eBusiness CA-1, O=Equifax Secure Inc., C=US
          notYetValid: false
      properties:
        id:
          description: Unique ID of the virtualized API.
          example: bacb827e-e555-43fa-b006-50c7404aa990
          readOnly: true
          type: string
        organizationId:
          description: The organization that created the virtualized API.
          example: b6889722b7-222-b06f-2eaaf1548898
          type: string
        apiId:
          description: The identifier of the API that was virtualized.  This is the
            only attribute that is required to create a virtualized API.
          example: 9064396e-7743-4644-a0b7-d30b421e2b30
          type: string
        name:
          description: The name of this virtualized API.
          example: My virtualized API
          type: string
        version:
          description: The API version.
          example: "1.0"
          type: string
        apiRoutingKey:
          description: The key for routing between two APIs on the same path.
          example: "1"
          type: string
        vhost:
          description: The virtual host of this virtualized API.
          example: host.company.com
          type: string
        path:
          description: The path that services this virtualized API.
          example: /flikr
          type: string
        descriptionType:
          description: 'Type of descripton to use.  One of: _manual_, _markdown_,
            _url_, or _original_ (default).'
          example: manual
          type: string
        descriptionManual:
          description: Markdown string to use as the description of the API.
          example: |-
            My API
            ====

            This is my API.
          type: string
        descriptionMarkdown:
          description: Markdown file to use as the description of the API within the
            API Catalog.
          example: ${environment.VINSTDIR}/../markdown/flickr/flickr.md
          type: string
        descriptionUrl:
          description: External URL to use as the description of the API.
          example: http://doc.api.org/myapi/mymethod#anchor
          type: string
        summary:
          description: A short summary description of the API.
          example: |-
            My API
            ====

            This is my API.
          type: string
        retired:
          default: false
          description: Immediately retires the virtualized API.
          example: false
          type: boolean
        expired:
          default: false
          description: Immediately expires the virtualized API.
          example: false
          type: boolean
        image:
          description: URI of the image to be used for this virtualized API. To update
            the image, please refer to the API.
          example: resources/photo.jpg
          type: string
        retirementDate:
          description: Date to retire the virtualized API.  If _retired_ is true,
            this is the date on which it was retired.
          example: 1364287486876
          format: int64
          type: integer
        deprecated:
          default: false
          description: Immediately deprecates the virtualized API.  If deprecated,
            then _retiredOn_ is optionally used to retire the virtualized API on the
            specified date.
          example: true
          type: boolean
        state:
          description: 'The state of the virtualized API.  One of: unpublished, pending,
            or published.'
          example: unpublished
          type: string
        createdOn:
          description: Epoch/Unix time stamp when the virtualized API was created.
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        createdBy:
          description: The unique identifier for user that created the virtualized
            API.
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
          readOnly: true
          type: string
        corsProfiles:
          description: The suite of CORS Profiles for this virtualized API.
          items:
            $ref: '#/components/schemas/CORSProfile'
          type: array
        securityProfiles:
          description: The suite of Security Profiles for this virtualized API.
          items:
            $ref: '#/components/schemas/SecurityProfile'
          type: array
        authenticationProfiles:
          description: The suite of Security Profiles for this virtualized API.
          items:
            $ref: '#/components/schemas/AuthenticationProfile'
          type: array
        inboundProfiles:
          additionalProperties:
            $ref: '#/components/schemas/InboundProfiles'
          description: The inbound profiles that apply to the virtualized API.  There
            must always a *\_default* profile.
          example:
            _default:
              monitorAPI: "true"
              securityProfile: Default Inbound Security
              corsProfile: Default CORS profile
              monitorSubject: authentication.subject.id
          type: object
        outboundProfiles:
          additionalProperties:
            $ref: '#/components/schemas/OutboundProfiles'
          description: The outbound profiles that apply to the virtualized API.  There
            must always a *\_default* profile.
          example:
            _default:
              authenticationProfile: My Backend
              apiMethodId: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
              routeType: proxy
              apiId: 9064396e-7743-4644-a0b7-d30b421e2b30
          type: object
        serviceProfiles:
          additionalProperties:
            $ref: '#/components/schemas/ServiceProfiles'
          description: The inbound profiles that apply to the virtualized API.  There
            must always a *\_default* profile.
          example:
            _default:
              basePath: http://backend.io
              apiId: 96f745ae-a41a-41a9-aad8-8bf24b5cc27e
          type: object
        caCerts:
          description: The outbound profiles that apply to the virtualized API.  There
            must always a *\_default* profile.
          items:
            $ref: '#/components/schemas/CACert'
          type: array
        tags:
          additionalProperties:
            items:
              type: string
            type: array
          description: The list of tags associated with this API. Each tag can have
            multiple values
          example:
            Category:
            - Social Network, Photos
            Type:
            - REST
          type: object
      required:
      - apiId
      - apiRoutingKey
      - authenticationProfiles
      - caCerts
      - corsProfiles
      - deprecated
      - descriptionManual
      - descriptionMarkdown
      - descriptionType
      - descriptionUrl
      - expired
      - id
      - image
      - inboundProfiles
      - name
      - organizationId
      - path
      - retired
      - retirementDate
      - securityProfiles
      - serviceProfiles
      - state
      - summary
      - tags
      - version
      - vhost
      type: object
    BackendMethodExport:
      description: Backend API method export.
      example:
        op: MyAPI-1.0:GET:/things
        apiMethodId: 19ec174e-b217-4c60-aa40-c22040569363
        apiId: 0a275f85-aec2-4100-8f9e-b4e7abdca108
      properties:
        apiId:
          description: Internal use only.
          example: 0a275f85-aec2-4100-8f9e-b4e7abdca108
          type: string
        apiMethodId:
          description: Internal use only.
          example: 19ec174e-b217-4c60-aa40-c22040569363
          type: string
        op:
          description: Internal use only.
          example: MyAPI-1.0:GET:/things
          type: string
      type: object
    Authorization:
      example:
        format: format
        passAs: header
        description: description
        title: title
        type: apiKey
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        grantTypes:
          implicit:
            loginEndpoint:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              url: http://myapi.io/oauth/dialog
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            format: format
            tokenName: access_token
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          authorization_code:
            tokenRequestEndpoint:
              clientSecretName: "."
              format: format
              clientIdName: "."
              description: description
              title: title
              type: string
              required:
              - required
              - required
              url: "."
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            tokenEndpoint:
              format: format
              tokenName: access_code
              description: description
              title: title
              type: string
              required:
              - required
              - required
              url: http://myapi.io/oauth/token
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        default: '{}'
        keyname: apiKey
        id: id
        scopes:
        - format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          scope: read
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        - format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          scope: read
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        passAs:
          description: Denotes how the API key must be passed. Valid values are 'header'
            or 'query'.
          example: header
          type: string
        keyname:
          description: The name of the header or query parameter to be used when passing
            the API key.
          example: apiKey
          type: string
        scopes:
          description: The list of OAuth scopes.
          items:
            $ref: '#/components/schemas/Scope'
          type: array
        grantTypes:
          $ref: '#/components/schemas/GrantTypes'
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The authorization type.  One of: basicAuth, apiKey, oauth2,
            none'
          example: apiKey
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    SwaggerSecurityProfile:
      description: Security Profile details.
      example:
        devices:
        - type: APIKeyOnlySecurityDevice
          typeDisplayName: API Key only
          name: API Key Device
          order: 1
          keyField: KeyId
        - type: HTTPBasicSecurityDevice
          typeDisplayName: HTTP Basic Authentication
          name: HTTP Basic Device
          order: 0
          realm: axway
      properties:
        devices:
          description: List of Security Devices associated with this profile
          example:
          - type: APIKeyOnlySecurityDevice
            typeDisplayName: API Key only
            name: API Key Device
            order: 1
            keyField: KeyId
          - type: HTTPBasicSecurityDevice
            typeDisplayName: HTTP Basic Authentication
            name: HTTP Basic Device
            order: 0
            realm: axway
          items:
            $ref: '#/components/schemas/SwaggerSecurityDevice'
          type: array
      type: object
    AlertConfig:
      description: API alert system configuration
      example:
        quotaDefaultChanged: false
        applicationRemoveapi: false
        appdevApprove: false
        organizationCreate: false
        appdevDisable: false
        applicationDisable: false
        applicationEnable: false
        organizationDisable: false
        applicationApproveapi: false
        applicationDisableapi: false
        applicationApprove: false
        applicationDelete: false
        apiproxyUnpublish: false
        apiproxyUndeprecate: false
        applicationcredentialsDelete: false
        applicationEnableapi: false
        organizationRemoveapi: false
        runAppquotaExceeded: false
        appdevEnable: false
        apiproxyDeprecate: false
        applicationcredentialsEnable: false
        apiproxyPublish: false
        organizationEnable: false
        quotaOverrideDeleted: false
        appdevDelete: false
        appdevResetpwd: false
        organizationDisableapi: false
        quotaOverrideChanged: false
        organizationEnableapi: false
        applicationcredentialsCreate: false
        applicationcredentialsUpdate: false
        apicatalogEnable: false
        runAppquotaWarning: false
        runSysquotaExceeded: false
        runSysquotaWarning: false
        appdevRegister: false
        organizationAddapi: false
        organizationDelete: false
        apiproxyRetire: false
        quotaSystemChanged: false
        applicationRequestapi: false
        applicationcredentialsDisable: false
        applicationRegister: false
        apicatalogDisable: false
      properties:
        runSysquotaExceeded:
          default: false
          example: false
          type: boolean
        runSysquotaWarning:
          default: false
          example: false
          type: boolean
        runAppquotaExceeded:
          default: false
          example: false
          type: boolean
        runAppquotaWarning:
          default: false
          example: false
          type: boolean
        quotaOverrideChanged:
          default: false
          example: false
          type: boolean
        quotaOverrideDeleted:
          default: false
          example: false
          type: boolean
        quotaDefaultChanged:
          default: false
          example: false
          type: boolean
        quotaSystemChanged:
          default: false
          example: false
          type: boolean
        organizationCreate:
          default: false
          example: false
          type: boolean
        organizationDelete:
          default: false
          example: false
          type: boolean
        organizationEnable:
          default: false
          example: false
          type: boolean
        organizationDisable:
          default: false
          example: false
          type: boolean
        organizationAddapi:
          default: false
          example: false
          type: boolean
        organizationRemoveapi:
          default: false
          example: false
          type: boolean
        organizationEnableapi:
          default: false
          example: false
          type: boolean
        organizationDisableapi:
          default: false
          example: false
          type: boolean
        appdevRegister:
          default: false
          example: false
          type: boolean
        appdevApprove:
          default: false
          example: false
          type: boolean
        appdevDelete:
          default: false
          example: false
          type: boolean
        appdevEnable:
          default: false
          example: false
          type: boolean
        appdevDisable:
          default: false
          example: false
          type: boolean
        appdevResetpwd:
          default: false
          example: false
          type: boolean
        applicationRegister:
          default: false
          example: false
          type: boolean
        applicationApprove:
          default: false
          example: false
          type: boolean
        applicationDelete:
          default: false
          example: false
          type: boolean
        applicationEnable:
          default: false
          example: false
          type: boolean
        applicationDisable:
          default: false
          example: false
          type: boolean
        applicationRequestapi:
          default: false
          example: false
          type: boolean
        applicationApproveapi:
          default: false
          example: false
          type: boolean
        applicationRemoveapi:
          default: false
          example: false
          type: boolean
        applicationEnableapi:
          default: false
          example: false
          type: boolean
        applicationDisableapi:
          default: false
          example: false
          type: boolean
        apicatalogEnable:
          default: false
          example: false
          type: boolean
        apicatalogDisable:
          default: false
          example: false
          type: boolean
        apiproxyPublish:
          default: false
          example: false
          type: boolean
        apiproxyDeprecate:
          default: false
          example: false
          type: boolean
        apiproxyUndeprecate:
          default: false
          example: false
          type: boolean
        apiproxyRetire:
          default: false
          example: false
          type: boolean
        apiproxyUnpublish:
          default: false
          example: false
          type: boolean
        applicationcredentialsCreate:
          default: false
          description: Specifies whether or not an alert will be generated when an
            application credential is created
          example: false
          type: boolean
        applicationcredentialsUpdate:
          default: false
          description: Specifies whether or not an alert will be generated when an
            application credential is updated
          example: false
          type: boolean
        applicationcredentialsDelete:
          default: false
          description: Specifies whether or not an alert will be generated when an
            application credential is deleted
          example: false
          type: boolean
        applicationcredentialsEnable:
          default: false
          description: Specifies whether or not an alert will be generated when an
            application credential is enabled
          example: false
          type: boolean
        applicationcredentialsDisable:
          default: false
          description: Specifies whether or not an alert will be generated when an
            application credential is disabled
          example: false
          type: boolean
      type: object
    RegistrationToken:
      description: Organization Registration Token.
      example:
        organizationId: 3e21b76a-defa-49ab-9682-a9cd60387e37
        maxUsers: 10
        createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
        userQuota: 10
        expiry: 1366930800000
        createdOn: 1364407145121
        enabled: true
        token: "257690"
      properties:
        token:
          description: The registration code
          example: "257690"
          type: string
        organizationId:
          description: Unique identifier for the organization who the registration
            code applies to
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        expiry:
          description: Epoch/Unix time stamp when the registration code will expire
          example: 1366930800000
          format: int64
          type: integer
        createdOn:
          description: Epoch/Unix time stamp when the registration code was created
          example: 1364407145121
          format: int64
          readOnly: true
          type: integer
        createdBy:
          description: The unique identifier for user that created the registration
            code
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
          readOnly: true
          type: string
        userQuota:
          description: The remaining number of users that can use the registration
            code for self registration to an organization
          example: 10
          format: int32
          type: integer
        maxUsers:
          description: The total number of users that can use the registration code
            for self registration to an organization since the code has been created
          example: 10
          format: int32
          type: integer
        enabled:
          default: false
          description: Flag disables registration code so that it can no longer be
            used for registration
          example: true
          type: boolean
      type: object
    MetricTimeline:
      description: The metrics timeline report is a report of a specific metric over
        a period of time.
      example:
        series:
        - pointStart: 1363737600000
          data:
          - 0
          - 0
          - 1
          - 0
          - 2
          - 0
          - 3
          - 0
          - 4
          pointInterval: 300000
          name: numMessages
        - pointStart: 1363737600000
          data:
          - 0
          - 0
          - 1
          - 0
          - 2
          - 0
          - 3
          - 0
          - 4
          pointInterval: 300000
          name: numMessages
        name: numMessages
        id: id
      properties:
        id:
          type: string
        name:
          description: The metric name.
          example: numMessages
          readOnly: true
          type: string
        series:
          description: The time series.
          items:
            $ref: '#/components/schemas/Series'
          type: array
      type: object
    Swagger:
      description: A Swagger API definition.
      example:
        documentationUrl: http://api.acme.com/docs#method
        basePaths:
        - http://localhost:8080
        - https://localhost:8081
        cors: true
        resourcePath: /api
        deprecated: false
        availableSDK: {}
        authorizations: {}
        description: description
        title: title
        type: rest
        required:
        - required
        - required
        example: '{}'
        default: '{}'
        apiVersion: "1.0"
        expired: false
        securityProfile:
          devices:
          - type: APIKeyOnlySecurityDevice
            typeDisplayName: API Key only
            name: API Key Device
            order: 1
            keyField: KeyId
          - type: HTTPBasicSecurityDevice
            typeDisplayName: HTTP Basic Authentication
            name: HTTP Basic Device
            order: 0
            realm: axway
        id: id
        state: rest
        consumes:
        - application/json
        summary: The Flickr photo-sharing API
        models:
          User:
            type: object
            required:
            - id
            - name
            - email
            properties:
              id:
                type: string
              name:
                type: string
              email:
                type: string
        image: image
        retirementDate: 1420070400000
        format: format
        enum:
        - enum
        - enum
        discriminator: discriminator
        tags:
          Category:
          - Social Network
          - Photos
          Type:
          - REST
          Department:
          - Development
        swaggerVersion: "1.1"
        basePath: http://basepath.org
        apis:
        - format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          path: /users
          default: '{}'
          operations:
          - documentationUrl: http://api.acme.com/docs#method
            notes: If the user does not exist, then a *404 Not Found* error is returned
            cors: true
            authorizations: {}
            description: description
            title: title
            httpMethod: GET
            type: User
            required:
            - required
            - required
            example: '{}'
            default: '{}'
            responseClass: User
            securityProfile:
              devices:
              - type: APIKeyOnlySecurityDevice
                typeDisplayName: API Key only
                name: API Key Device
                order: 1
                keyField: KeyId
              - type: HTTPBasicSecurityDevice
                typeDisplayName: HTTP Basic Authentication
                name: HTTP Basic Device
                order: 0
                realm: axway
            nickname: getUserById
            errorResponses:
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            id: id
            consumes:
            - application/json
            summary: Gets a user by ID
            format: format
            enum:
            - enum
            - enum
            discriminator: discriminator
            tags:
              Category:
              - Social Network
              - Photos
              Type:
              - REST
              Department:
              - Development
            produces:
            - application/json
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            parameters:
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          - documentationUrl: http://api.acme.com/docs#method
            notes: If the user does not exist, then a *404 Not Found* error is returned
            cors: true
            authorizations: {}
            description: description
            title: title
            httpMethod: GET
            type: User
            required:
            - required
            - required
            example: '{}'
            default: '{}'
            responseClass: User
            securityProfile:
              devices:
              - type: APIKeyOnlySecurityDevice
                typeDisplayName: API Key only
                name: API Key Device
                order: 1
                keyField: KeyId
              - type: HTTPBasicSecurityDevice
                typeDisplayName: HTTP Basic Authentication
                name: HTTP Basic Device
                order: 0
                realm: axway
            nickname: getUserById
            errorResponses:
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            id: id
            consumes:
            - application/json
            summary: Gets a user by ID
            format: format
            enum:
            - enum
            - enum
            discriminator: discriminator
            tags:
              Category:
              - Social Network
              - Photos
              Type:
              - REST
              Department:
              - Development
            produces:
            - application/json
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            parameters:
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          name: name
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        - format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          path: /users
          default: '{}'
          operations:
          - documentationUrl: http://api.acme.com/docs#method
            notes: If the user does not exist, then a *404 Not Found* error is returned
            cors: true
            authorizations: {}
            description: description
            title: title
            httpMethod: GET
            type: User
            required:
            - required
            - required
            example: '{}'
            default: '{}'
            responseClass: User
            securityProfile:
              devices:
              - type: APIKeyOnlySecurityDevice
                typeDisplayName: API Key only
                name: API Key Device
                order: 1
                keyField: KeyId
              - type: HTTPBasicSecurityDevice
                typeDisplayName: HTTP Basic Authentication
                name: HTTP Basic Device
                order: 0
                realm: axway
            nickname: getUserById
            errorResponses:
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            id: id
            consumes:
            - application/json
            summary: Gets a user by ID
            format: format
            enum:
            - enum
            - enum
            discriminator: discriminator
            tags:
              Category:
              - Social Network
              - Photos
              Type:
              - REST
              Department:
              - Development
            produces:
            - application/json
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            parameters:
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          - documentationUrl: http://api.acme.com/docs#method
            notes: If the user does not exist, then a *404 Not Found* error is returned
            cors: true
            authorizations: {}
            description: description
            title: title
            httpMethod: GET
            type: User
            required:
            - required
            - required
            example: '{}'
            default: '{}'
            responseClass: User
            securityProfile:
              devices:
              - type: APIKeyOnlySecurityDevice
                typeDisplayName: API Key only
                name: API Key Device
                order: 1
                keyField: KeyId
              - type: HTTPBasicSecurityDevice
                typeDisplayName: HTTP Basic Authentication
                name: HTTP Basic Device
                order: 0
                realm: axway
            nickname: getUserById
            errorResponses:
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            - reason: Not Found
              code: 404
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              $ref: '#/definitions/User'
              properties:
                key:
                  format: format
                  description: description
                  title: title
                  type: string
                  required:
                  - required
                  - required
                  enum:
                  - enum
                  - enum
                  example: '{}'
                  discriminator: discriminator
                  default: '{}'
                  id: id
                  $ref: '#/definitions/User'
                  properties: {}
            id: id
            consumes:
            - application/json
            summary: Gets a user by ID
            format: format
            enum:
            - enum
            - enum
            discriminator: discriminator
            tags:
              Category:
              - Social Network
              - Photos
              Type:
              - REST
              Department:
              - Development
            produces:
            - application/json
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            parameters:
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            - schema:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              paramType: body
              allowMultiple: false
              defaultValue: text
              name: userId
              format: string
              description: description
              type: string
              items:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
              required: true
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          name: name
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        produces:
        - application/json
        name: Flickr
        availableApiDefinitions: {}
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        apiVersion:
          description: The API version
          example: "1.0"
          type: string
        swaggerVersion:
          description: The Swagger version
          example: "1.1"
          type: string
        basePath:
          description: The base path
          example: http://basepath.org
          type: string
        resourcePath:
          description: The resource path hosted
          example: /api
          type: string
        models:
          additionalProperties:
            properties: {}
            type: object
          description: The models/schema for the API
          example:
            User:
              type: object
              required:
              - id
              - name
              - email
              properties:
                id:
                  type: string
                name:
                  type: string
                email:
                  type: string
          type: object
        consumes:
          description: The content types that the API consumes
          example:
          - application/json
          items:
            type: string
          type: array
        produces:
          description: The content types that the API produces
          example:
          - application/json
          items:
            type: string
          type: array
        authorizations:
          additionalProperties:
            $ref: '#/components/schemas/Authorization'
          description: The Authorization schemes provided for this API
          example: {}
          type: object
        name:
          description: The name of the API
          example: Flickr
          type: string
        summary:
          description: Brief summary of the API.
          example: The Flickr photo-sharing API
          type: string
        securityProfile:
          $ref: '#/components/schemas/SwaggerSecurityProfile'
        basePaths:
          description: Array of basePaths supported for this API/service, based on
            the configured ports
          example:
          - http://localhost:8080
          - https://localhost:8081
          items:
            type: string
          type: array
        image:
          description: API image URL
          type: string
        state:
          description: 'The state of the API.  Possible values: ''pending'', ''unpublished'',
            or ''published''.'
          example: rest
          type: string
        cors:
          default: false
          description: Indicates that the API is CORS enabled
          example: true
          type: boolean
        expired:
          default: false
          description: Indicates that the API is expired.
          example: false
          type: boolean
        deprecated:
          default: false
          description: Indicates that the API is deprecated.  If 'true', then the
            API may have a 'retirementDate'.
          example: false
          type: boolean
        retirementDate:
          description: Indicates that the API is deprecated and will be retired on
            the supplied date (in milliseconds).
          example: 1420070400000
          format: int64
          type: integer
        tags:
          additionalProperties:
            items:
              type: string
            type: array
          description: The list of tags associated with this API. Each tag can have
            multiple values
          example:
            Category:
            - Social Network
            - Photos
            Type:
            - REST
            Department:
            - Development
          type: object
        documentationUrl:
          description: The documentation URL for the operation
          example: http://api.acme.com/docs#method
          type: string
        availableApiDefinitions:
          additionalProperties:
            format: uri
            type: string
          description: The schema definitions that this API supports and links to
            those definitions.
          example: {}
          type: object
        availableSDK:
          additionalProperties:
            format: uri
            type: string
          description: The SDK downloads that this API supports and links to those
            downloads.
          example: {}
          type: object
        apis:
          description: The API resources
          items:
            $ref: '#/components/schemas/API'
          type: array
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The resource type. Possible values: ''rest'', ''wsdl'''
          example: rest
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    ApplicationRequest:
      description: API Manager application request.
      example:
        organizationId: 3e21b76a-defa-49ab-9682-a9cd60387e37
        image: resources/photo.jpg
        apis:
        - c1c63d3b-5283-4755-ade7-e2377bd35049
        phone: +1 877-564-7700
        name: My First iPhone App
        description: My First iPhone App which is a "Hello World" basic application
        id: b76a3e23-deca-49ab-9682-79cd503b7e3a
        email: support@acmecorp.com
      properties:
        id:
          description: The unique identifier for the application request
          example: b76a3e23-deca-49ab-9682-79cd503b7e3a
          type: string
        name:
          description: The display name for the application
          example: My First iPhone App
          type: string
        description:
          description: Descriptive text for the application
          example: My First iPhone App which is a "Hello World" basic application
          type: string
        organizationId:
          description: The organization identifier to which the application request
            belongs
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          type: string
        phone:
          description: Contact phone number of the application
          example: +1 877-564-7700
          type: string
        email:
          description: The contact email address associated with the application
          example: support@acmecorp.com
          type: string
        image:
          description: URI of the image to be used for this application, this field
            only indicates that the application has an image assigned to it. In order
            to retrieve the actual image use the following URL /api/portal/organizations/{uid
            of org}/image/
          example: resources/photo.jpg
          type: string
        apis:
          description: A list of unqiue API identifiers to which the application wants
            to use.
          example:
          - c1c63d3b-5283-4755-ade7-e2377bd35049
          items:
            type: string
          type: array
      type: object
    AuthorizationCode:
      example:
        tokenRequestEndpoint:
          clientSecretName: "."
          format: format
          clientIdName: "."
          description: description
          title: title
          type: string
          required:
          - required
          - required
          url: "."
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        tokenEndpoint:
          format: format
          tokenName: access_code
          description: description
          title: title
          type: string
          required:
          - required
          - required
          url: http://myapi.io/oauth/token
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        default: '{}'
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        tokenRequestEndpoint:
          $ref: '#/components/schemas/TokenRequestEndpoint'
        tokenEndpoint:
          $ref: '#/components/schemas/TokenEndpoint'
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    DiscoveryAPI:
      description: REST API information.
      example:
        summary: The Flickr photo-sharing API
        name: Flickr API
        id: 925129c4-0c4b-4adb-95c4-fdbc741eb333
        type: rest
        uri: https://localhost:8075/api/portal/v1.0/discovery/swagger/api/Flickr
      properties:
        name:
          description: The name of the API
          example: Flickr API
          type: string
        summary:
          description: Summary of the API
          example: The Flickr photo-sharing API
          type: string
        id:
          description: The unique identifier for the API
          example: 925129c4-0c4b-4adb-95c4-fdbc741eb333
          type: string
        uri:
          description: The URL of where further information of the API is available
            in the portal
          example: https://localhost:8075/api/portal/v1.0/discovery/swagger/api/Flickr
          type: string
        type:
          description: The type of API, either rest or wsdl
          example: rest
          type: string
      type: object
    ResponseCode:
      description: An operation response code.
      example:
        schema:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        code: 404
        message: Not Found
      properties:
        code:
          description: The response code
          example: 404
          format: int64
          type: integer
        message:
          description: The response message
          example: Not Found
          type: string
        schema:
          $ref: '#/components/schemas/SchemaObject'
      type: object
    ExternalClient:
      description: API Manager external client
      example:
        clientId: 296ec1ae-3fc7-4470-8d90-a6cc1482797f
        createdBy: 3e21b76a-defa-49ab-9682-a9cd60387e37
        corsOrigins: '[example.com]'
        id: 19da5d5e-b18a-4217-abec-291033cd939c
        createdOn: 1364287486876
        enabled: true
      properties:
        id:
          description: The ID of the external client
          example: 19da5d5e-b18a-4217-abec-291033cd939c
          readOnly: true
          type: string
        clientId:
          description: The 3rd party client ID. This client ID is provided by a 3rd
            party OAuth service and is used to map an application to an external client.
            This value is unique, i.e. no other application can specify the same client
            ID.
          example: 296ec1ae-3fc7-4470-8d90-a6cc1482797f
          type: string
        enabled:
          default: false
          description: Flag disables the external client so it can't be used in authentication
          example: true
          type: boolean
        createdBy:
          description: The unique identifier of the user that created the mapping
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        createdOn:
          description: Epoch/Unix time stamp when the mapping was created
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        corsOrigins:
          description: The domains to allow access for browser-based clients
          example: '[example.com]'
          items:
            type: string
          type: array
      type: object
    LoginEndpoint:
      example:
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        url: http://myapi.io/oauth/dialog
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        url:
          description: The URL of the authorization endpoint for the implicit grant
            flow. The value should be in a URL format.
          example: http://myapi.io/oauth/dialog
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    Service:
      example:
        scheme: scheme
        managementPort: 1
        name: name
        hostID: hostID
        id: id
        type: gateway
        enabled: false
        tags:
          key: tags
      properties:
        id:
          type: string
        name:
          type: string
        type:
          enum:
          - gateway
          - nodemanager
          type: string
        scheme:
          type: string
        hostID:
          type: string
        managementPort:
          format: int32
          type: integer
        tags:
          additionalProperties:
            type: string
          type: object
        enabled:
          default: false
          type: boolean
      type: object
    Host:
      example:
        name: name
        id: id
      properties:
        id:
          type: string
        name:
          type: string
      type: object
    OAuthResource:
      description: OAuth protected resource.
      example:
        uriprefix: /api/oauth/protected
        isDefault: false
        scope: scope
        id: 1e71b76a-defa-49ab-96s2-a9cd60387f31
        scopes: email
        applicationId: 3e21b76a-defa-49ab-9682-a9cd60387e37
        enabled: false
      properties:
        id:
          description: The unique identifier for the oauth protected resource
          example: 1e71b76a-defa-49ab-96s2-a9cd60387f31
          type: string
        applicationId:
          description: The unique identifier for the application who has access to
            this resource
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          type: string
        uriprefix:
          description: The uri prefix which this oauth protected resource relates
            to
          example: /api/oauth/protected
          type: string
        scopes:
          description: Set of scope strings that have been resolved from querying
            the OAuth Resource Service at the uri prefix
          example: email
          items:
            type: string
          type: array
          uniqueItems: true
        enabled:
          default: false
          description: Flag to indicate if this oauth protected resource is enabled
            or not
          example: false
          type: boolean
        isDefault:
          default: false
          type: boolean
        scope:
          type: string
      required:
      - applicationId
      - id
      type: object
    Lock:
      example:
        locker: locker
        timestamp: 5
      properties:
        locker:
          type: string
        timestamp:
          format: int64
          type: integer
      type: object
    ErrorResponse:
      description: An operation response code.
      example:
        reason: Not Found
        code: 404
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        code:
          description: The response code
          example: 404
          format: int64
          type: integer
        reason:
          description: The response reason
          example: Not Found
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    APIKey:
      description: API Manager API Key for use in authenticating applications
      example:
        createdBy: 3e21b76a-defa-49ab-9682-a9cd60387e37
        deletedOn: 1364287486876
        corsOrigins: '[example.com]'
        id: 19da5d5e-b18a-4217-abec-291033cd939c
        secret: 19da5d5e-b18a-4217-abec-291033cd939c
        applicationId: 19da5d5e-b18a-4217-abec-291033cd939c
        createdOn: 1364287486876
        enabled: true
      properties:
        id:
          description: The ID which is used to identify the API Key. You include it
            in each request, so it's not a secret.
          example: 19da5d5e-b18a-4217-abec-291033cd939c
          type: string
        applicationId:
          description: The ID which is used to identify an application. You include
            it in each request, so it's not a secret.
          example: 19da5d5e-b18a-4217-abec-291033cd939c
          type: string
        secret:
          description: Each  API Key ID has a Secret Key associated with it. This
            key is just a long string of characters that can be used to calculate
            the digital signature that can be included in requests. Your Secret Key
            is a secret do not distribute.
          example: 19da5d5e-b18a-4217-abec-291033cd939c
          type: string
        enabled:
          default: false
          description: Flag disables the API key so can't be used in authentication
          example: true
          type: boolean
        createdBy:
          description: The unique identifier for user that generated the API Key
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        createdOn:
          description: Epoch/Unix time stamp when the API key was created
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        deletedOn:
          description: Epoch/Unix time stamp when the API key was deleted
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        corsOrigins:
          description: The domains to allow access for browser-based clients
          example: '[example.com]'
          items:
            type: string
          type: array
      type: object
    Series:
      description: A metric time series.
      example:
        pointStart: 1363737600000
        data:
        - 0
        - 0
        - 1
        - 0
        - 2
        - 0
        - 3
        - 0
        - 4
        pointInterval: 300000
        name: numMessages
      properties:
        name:
          description: The metric type name
          example: numMessages
          readOnly: true
          type: string
        pointInterval:
          description: The amount of time, in milliseconds, between data points
          example: 300000
          format: int64
          type: integer
        pointStart:
          description: The time of the first data point in milliseconds
          example: 1363737600000
          format: int64
          type: integer
        data:
          description: The a metric measurement at a specific time interval
          example:
          - 0
          - 0
          - 1
          - 0
          - 2
          - 0
          - 3
          - 0
          - 4
          items:
            format: float
            type: number
          type: array
      type: object
    OAuthProtectedResource:
      description: Scope and prefix information for OAuth protected resource.
      example:
        uriprefix: /api/oauth/protected
        scope: Read
        description: Read access to resource
        scopes:
        - resource.WRITE
        - resource.READ
      properties:
        uriprefix:
          description: Oauth protected path
          example: /api/oauth/protected
          type: string
        scopes:
          description: List of scopes associated with the OAuth protected path
          example:
          - resource.WRITE
          - resource.READ
          items:
            type: string
          type: array
          uniqueItems: true
        scope:
          description: Oauth Scope
          example: Read
          type: string
        description:
          description: Scope Description
          example: Read access to resource
          type: string
      type: object
    PortalTrafficListener:
      description: A HTTP service listener.
      example:
        protocol: http
        address: localhost
        port: 8080
        prefix: prefix
        name: API Manager
        id: /[NetService]name=Service/[HTTP]name=API Portal
        url: http://localhost:8080
      properties:
        id:
          description: The service listener identifier
          example: /[NetService]name=Service/[HTTP]name=API Portal
          type: string
        name:
          description: The name of the service listener
          example: API Manager
          type: string
        protocol:
          description: The listener protocol
          example: http
          type: string
        port:
          description: The listener port
          example: 8080
          format: int32
          type: integer
        prefix:
          description: The listener prefix
          type: string
        address:
          description: The listener address
          example: localhost
          type: string
        url:
          description: The listener URL
          example: http://localhost:8080
          type: string
      required:
      - address
      - id
      - name
      - port
      - protocol
      type: object
    RemoteHost:
      description: An API Manager-registered remote host.
      example:
        outputEncodings:
        - deflate
        - gzip
        sslSessionCacheSize: 32
        createdOn: 1364287486876
        exportCorrelationId: true
        organizationId: 3e21b76a-defa-49ab-9682-a9cd60387e37
        addressCacheTimeout: 300000
        maxSendBytes: 20971520
        includeContentLengthRequest: false
        includeContentLengthResponse: false
        activeTimeout: 30000
        outputBufferSize: 8192
        id: 3e21b76a-defa-49ab-9682-a9cd60387e37
        maxReceiveBytes: 20971520
        connectionTimeout: 30000
        maxConnections: 128
        inputBufferSize: 8192
        offerTLSServerName: false
        inputEncodings:
        - deflate
        - gzip
        port: 80
        createdBy: de077cd8-83b7-46d1-b06f-2eaaf1548898
        idleTimeout: 15000
        name: www.google.com
        transactionTimeout: 240000
        verifyServerHostname: false
        allowHTTP11: false
      properties:
        id:
          description: The unique identifier for the remote host
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          readOnly: true
          type: string
        name:
          description: The host name of the remote host
          example: www.google.com
          type: string
        port:
          description: The host port of the remote host
          example: 80
          format: int32
          type: integer
        createdOn:
          description: Epoch/Unix time stamp when the remote host was created
          example: 1364287486876
          format: int64
          readOnly: true
          type: integer
        createdBy:
          description: The unique identifier for user that created the remote host
          example: de077cd8-83b7-46d1-b06f-2eaaf1548898
          readOnly: true
          type: string
        organizationId:
          description: The organization identifier to which the remote host belongs
          example: 3e21b76a-defa-49ab-9682-a9cd60387e37
          type: string
        maxConnections:
          description: The maximum number of connections to open to a Remote Host.
            If the maximum number of connections has already been established, the
            API Gateway instance waits for a connection to drop or become idle before
            making another request. The default value is -1, meaning there is no limit
          example: 128
          format: int32
          type: integer
        allowHTTP11:
          default: false
          description: Enables the API Gateway to use HTTP 1.1 when connecting to
            the remote host. Default value is false, meaning HTTP 1.0 is used
          example: false
          type: boolean
        includeContentLengthRequest:
          default: false
          description: If this option is set, the API Gateway will include the Content-Length
            HTTP header in all requests to this Remote Host. Default value is false.
          example: false
          type: boolean
        includeContentLengthResponse:
          default: false
          description: If this option is set, if the API Gateway receives a response
            from this Remote Host that contains a Content-Length HTTP header, it returns
            this length to the client. Default value is false.
          example: false
          type: boolean
        offerTLSServerName:
          default: false
          description: Adds a field to outbound TLS/SSL calls that shows the name
            that the client used to connect. Default value is false.
          example: false
          type: boolean
        verifyServerHostname:
          default: false
          description: Ensures that the certificate presented by the server matches
            the name of the remote host being connected to. This prevents host spoofing
            and man-in-the-middle attacks. Default value is false.
          example: false
          type: boolean
        connectionTimeout:
          description: If a connection to this remote host is not established within
            the time set in this field, the connection times out and the connection
            fails. Default value is 30000 milliseconds (30 seconds).
          example: 30000
          format: int64
          type: integer
        activeTimeout:
          description: The maximum amount of time permitted between reading successive
            blocks of data. If the Active Timeout is exceeded, the API Gateway closes
            the connection. This prevents a Remote Host from closing the connection
            while sending data. Default value is 30000 milliseconds (30 seconds).
          example: 30000
          format: int64
          type: integer
        transactionTimeout:
          description: The maximum amount of time permitted to complete the transaction.
            Default value is 240000 milliseconds (4 minutes).
          example: 240000
          format: int64
          type: integer
        idleTimeout:
          description: The maximum amount of time that API Gateway waits after sending
            a message over a persistent connection to the Remote Host before it closes
            the connection. Default value is 15000 milliseconds (15 seconds).
          example: 15000
          format: int64
          type: integer
        maxReceiveBytes:
          description: The maximum amount of data the API Gateway can receive per
            transaction. Default value is 20971520 bytes (20MiB).
          example: 20971520
          format: int64
          type: integer
        maxSendBytes:
          description: The maximum amount of data the API Gateway can transmit per
            transaction. Default value is 20971520 bytes (20MiB).
          example: 20971520
          format: int64
          type: integer
        inputBufferSize:
          description: The maximum amount of memory allocated to each request. Default
            value is 8192 bytes.
          example: 8192
          format: int64
          type: integer
        outputBufferSize:
          description: The maximum amount of memory allocated to each response. Default
            value is 8192 bytes.
          example: 8192
          format: int64
          type: integer
        addressCacheTimeout:
          description: The period of time to cache addressing information after it
            has been received from the naming service. Default value is 300000 milliseconds
            (5 minutes)
          example: 300000
          format: int64
          type: integer
        sslSessionCacheSize:
          description: Specifies the size of the SSL session cache for connections
            to the remote host, which controls the number of idle SSL sessions that
            can be kept in memory. Default value is 32.
          example: 32
          format: int32
          type: integer
        inputEncodings:
          description: 'Specifies the HTTP content encodings that the API Gateway
            can accept from peers. Supported encodings: *deflate*, *gzip*. If no encodings
            are specified the default encoding is applied.'
          example:
          - deflate
          - gzip
          items:
            type: string
          type: array
        outputEncodings:
          description: 'Specifies the HTTP content encodings that the API Gateway
            can apply to outgoing messages. Supported encodings: *deflate*, *gzip*.
            If no encodings are specified the default encoding is applied.'
          example:
          - deflate
          - gzip
          items:
            type: string
          type: array
        exportCorrelationId:
          default: false
          description: Specifies whether to add the X-CorrelationID header to outbound
            messages
          example: true
          type: boolean
      required:
      - name
      - port
      type: object
    Scope:
      example:
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        scope: read
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        scope:
          description: The OAuth2 scope name.
          example: read
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    Parameter:
      description: An API operation parameter for a [Method](Method.html), as part
        of the  [APIDefinition](APIDefinition.html).
      example:
        schema:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        paramType: body
        allowMultiple: false
        defaultValue: text
        name: userId
        format: string
        description: description
        type: string
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        required: true
      properties:
        name:
          description: The parameter name.
          example: userId
          type: string
        type:
          description: The parameter data type, e.g. *boolean*, *byte*, *date*, *double*,
            *float*, *integer*, *long*, *string*, or a type name found in [APIDefinition
            models](APIDefinition.html#models).
          example: string
          type: string
        format:
          example: string
          type: string
        description:
          type: string
        required:
          default: false
          description: Indicates that the parameter is required
          example: true
          type: boolean
        allowMultiple:
          default: false
          description: Indicates that the parameter can be included multiple times
            (e.g. query or form)
          example: false
          type: boolean
        items:
          $ref: '#/components/schemas/SchemaObject'
        defaultValue:
          description: Provides a default value for the parameter
          example: text
          type: string
        schema:
          $ref: '#/components/schemas/SchemaObject'
        paramType:
          description: The parameter type, e.g. query, form, path, body, header
          example: body
          type: string
      type: object
    API:
      description: The API is a path and operations.
      example:
        format: format
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        path: /users
        default: '{}'
        operations:
        - documentationUrl: http://api.acme.com/docs#method
          notes: If the user does not exist, then a *404 Not Found* error is returned
          cors: true
          authorizations: {}
          description: description
          title: title
          httpMethod: GET
          type: User
          required:
          - required
          - required
          example: '{}'
          default: '{}'
          responseClass: User
          securityProfile:
            devices:
            - type: APIKeyOnlySecurityDevice
              typeDisplayName: API Key only
              name: API Key Device
              order: 1
              keyField: KeyId
            - type: HTTPBasicSecurityDevice
              typeDisplayName: HTTP Basic Authentication
              name: HTTP Basic Device
              order: 0
              realm: axway
          nickname: getUserById
          errorResponses:
          - reason: Not Found
            code: 404
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          - reason: Not Found
            code: 404
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          id: id
          consumes:
          - application/json
          summary: Gets a user by ID
          format: format
          enum:
          - enum
          - enum
          discriminator: discriminator
          tags:
            Category:
            - Social Network
            - Photos
            Type:
            - REST
            Department:
            - Development
          produces:
          - application/json
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          parameters:
          - schema:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            paramType: body
            allowMultiple: false
            defaultValue: text
            name: userId
            format: string
            description: description
            type: string
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            required: true
          - schema:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            paramType: body
            allowMultiple: false
            defaultValue: text
            name: userId
            format: string
            description: description
            type: string
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            required: true
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        - documentationUrl: http://api.acme.com/docs#method
          notes: If the user does not exist, then a *404 Not Found* error is returned
          cors: true
          authorizations: {}
          description: description
          title: title
          httpMethod: GET
          type: User
          required:
          - required
          - required
          example: '{}'
          default: '{}'
          responseClass: User
          securityProfile:
            devices:
            - type: APIKeyOnlySecurityDevice
              typeDisplayName: API Key only
              name: API Key Device
              order: 1
              keyField: KeyId
            - type: HTTPBasicSecurityDevice
              typeDisplayName: HTTP Basic Authentication
              name: HTTP Basic Device
              order: 0
              realm: axway
          nickname: getUserById
          errorResponses:
          - reason: Not Found
            code: 404
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          - reason: Not Found
            code: 404
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            $ref: '#/definitions/User'
            properties:
              key:
                format: format
                description: description
                title: title
                type: string
                required:
                - required
                - required
                enum:
                - enum
                - enum
                example: '{}'
                discriminator: discriminator
                default: '{}'
                id: id
                $ref: '#/definitions/User'
                properties: {}
          id: id
          consumes:
          - application/json
          summary: Gets a user by ID
          format: format
          enum:
          - enum
          - enum
          discriminator: discriminator
          tags:
            Category:
            - Social Network
            - Photos
            Type:
            - REST
            Department:
            - Development
          produces:
          - application/json
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          parameters:
          - schema:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            paramType: body
            allowMultiple: false
            defaultValue: text
            name: userId
            format: string
            description: description
            type: string
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            required: true
          - schema:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            paramType: body
            allowMultiple: false
            defaultValue: text
            name: userId
            format: string
            description: description
            type: string
            items:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
            required: true
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        name: name
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        path:
          description: The API path
          example: /users
          type: string
        name:
          description: The name of the REST API Method. This contains the exposed
            path.
          type: string
        operations:
          description: The list of operations that can be performed on *path*
          items:
            $ref: '#/components/schemas/Operation'
          type: array
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    TokenRequestEndpoint:
      example:
        clientSecretName: "."
        format: format
        clientIdName: "."
        description: description
        title: title
        type: string
        required:
        - required
        - required
        url: "."
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        url:
          description: The URL of the authorization endpoint for the authentication
            code grant flow. The value should be in a URL format.
          example: "."
          type: string
        clientIdName:
          description: An optional alternative name to standard "client_id" OAuth2
            parameter.
          example: "."
          type: string
        clientSecretName:
          description: An optional alternative name to standard "client_secret" OAuth2
            parameter.
          example: "."
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    Implicit:
      example:
        loginEndpoint:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          url: http://myapi.io/oauth/dialog
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          items:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
          $ref: '#/definitions/User'
          properties:
            key:
              format: format
              description: description
              title: title
              type: string
              required:
              - required
              - required
              enum:
              - enum
              - enum
              example: '{}'
              discriminator: discriminator
              default: '{}'
              id: id
              $ref: '#/definitions/User'
              properties: {}
        format: format
        tokenName: access_token
        description: description
        title: title
        type: string
        required:
        - required
        - required
        enum:
        - enum
        - enum
        example: '{}'
        discriminator: discriminator
        default: '{}'
        id: id
        items:
          format: format
          description: description
          title: title
          type: string
          required:
          - required
          - required
          enum:
          - enum
          - enum
          example: '{}'
          discriminator: discriminator
          default: '{}'
          id: id
          $ref: '#/definitions/User'
          properties: {}
        $ref: '#/definitions/User'
        properties:
          key:
            format: format
            description: description
            title: title
            type: string
            required:
            - required
            - required
            enum:
            - enum
            - enum
            example: '{}'
            discriminator: discriminator
            default: '{}'
            id: id
            $ref: '#/definitions/User'
            properties: {}
      properties:
        id:
          description: An identifier
          readOnly: true
          type: string
        title:
          description: Schema title
          type: string
        description:
          description: Description of the Schema
          type: string
        format:
          description: 'The format ex: int32, int64, float, double, byte, binary,
            date, date-time or password'
          type: string
        required:
          description: Specifies if the parameter is required
          items:
            type: string
          type: array
        properties:
          additionalProperties:
            $ref: '#/components/schemas/SchemaObject'
          description: Not used beacause our model does not support inline nested
            types
          type: object
        items:
          $ref: '#/components/schemas/SchemaObject'
        example:
          description: if the schema is an array specifies the items type
          properties: {}
          type: object
        discriminator:
          type: string
        loginEndpoint:
          $ref: '#/components/schemas/LoginEndpoint'
        tokenName:
          description: An optional alternative name to standard 'access_token' OAuth2
            parameter.
          example: access_token
          type: string
        $ref:
          description: A Reference to a definition on definitions object
          example: '#/definitions/User'
          type: string
        default:
          description: Default value for this schema if it is applicable
          properties: {}
          type: object
        type:
          description: 'The type ex: array , boolean, integer , null , number, object,
            string'
          example: string
          type: string
        enum:
          items:
            type: string
          type: array
      type: object
    OutboundProfiles:
      description: Outbound profiles
      properties:
        authenticationProfile:
          description: Outbound authentication credentials if __routeType__ is 'proxy'.  Can
            be null to indicate no credentials.
          example: My Backend
          type: string
        routeType:
          description: 'The route type.  Values are either: ''proxy'' or ''policy''.    Can
            be null and defaults to *proxy*.'
          example: proxy
          type: string
        requestPolicy:
          description: Request policy that applies to all outbound requests.  Can
            be null to indicate no policy.
          type: string
        responsePolicy:
          description: Response policy that applies to all responses from outbound
            requests.  Can be null to indicate no policy.
          type: string
        routePolicy:
          description: Route policy if the routeType is 'policy', in which case it
            must be a valid policy ID.  Can be null if __routeType__ is 'proxy'.
          type: string
        faultHandlerPolicy:
          description: Fault handler policy that gets executed in the event of an
            error.  Can be null to indicate no policy.
          type: string
        apiId:
          description: Route to a different API.  Can be null.  Ignored on the 'default'
            outbound profile.
          example: 9064396e-7743-4644-a0b7-d30b421e2b30
          type: string
        apiMethodId:
          description: Route to a different API method.  Can be null.  Ignored on
            the 'default' outbound profile.
          example: 7fd18d9a-1258-4031-a168-d7f6bf612dc1
          type: string
        parameters:
          description: A list of outbound parameters values - maps from frontend parameters
            to backend parameters.
          items:
            $ref: '#/components/schemas/ParamValue'
          type: array
      type: object
    QuotaApiConstraintDTO:
      description: The APIConstraint is restriction that applies to API(s) and API
        method(s).
      example:
        method: 0c5f8a4a-0e74-4e66-ad7b-e21962940e02
        api: 60d1c7da-9e2e-4f57-948a-eeb1da71beca
        type: throttle
        config:
          messages: "10"
          per: "1"
          period: seconds
      properties:
        api:
          description: The API identifier from API discovery, or '\*' for all API
          example: 60d1c7da-9e2e-4f57-948a-eeb1da71beca
          type: string
        method:
          description: The API method identifier from API discovery, or '\*' for all
            methods
          example: 0c5f8a4a-0e74-4e66-ad7b-e21962940e02
          type: string
        type:
          description: 'The restriction type, one of: throttle, throttlemb'
          example: throttle
          type: string
        config:
          additionalProperties:
            type: string
          description: The restriction configuration
          example:
            messages: "10"
            per: "1"
            period: seconds
          type: object
      required:
      - type
      type: object
    MetricField:
      description: Queryable metric type information
      example:
        metricType: numMessages
        aggregateName: totalNumMessages
      properties:
        metricType:
          description: The metric type name
          example: numMessages
          readOnly: true
          type: string
        aggregateName:
          description: The metric aggregate name
          example: totalNumMessages
          readOnly: true
          type: string
      type: object
  securitySchemes:
    basic:
      scheme: basic
      type: http
